{"ast":null,"code":"\"use client\";\n\n// src/select.tsx\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { clamp } from \"@radix-ui/number\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { createCollection } from \"@radix-ui/react-collection\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { DismissableLayer } from \"@radix-ui/react-dismissable-layer\";\nimport { useFocusGuards } from \"@radix-ui/react-focus-guards\";\nimport { FocusScope } from \"@radix-ui/react-focus-scope\";\nimport { useId } from \"@radix-ui/react-id\";\nimport * as PopperPrimitive from \"@radix-ui/react-popper\";\nimport { createPopperScope } from \"@radix-ui/react-popper\";\nimport { Portal as PortalPrimitive } from \"@radix-ui/react-portal\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { createSlot } from \"@radix-ui/react-slot\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nimport { usePrevious } from \"@radix-ui/react-use-previous\";\nimport { VISUALLY_HIDDEN_STYLES } from \"@radix-ui/react-visually-hidden\";\nimport { hideOthers } from \"aria-hidden\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar OPEN_KEYS = [\" \", \"Enter\", \"ArrowUp\", \"ArrowDown\"];\nvar SELECTION_KEYS = [\" \", \"Enter\"];\nvar SELECT_NAME = \"Select\";\nvar [Collection, useCollection, createCollectionScope] = createCollection(SELECT_NAME);\nvar [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME, [createCollectionScope, createPopperScope]);\nvar usePopperScope = createPopperScope();\nvar [SelectProvider, useSelectContext] = createSelectContext(SELECT_NAME);\nvar [SelectNativeOptionsProvider, useSelectNativeOptionsContext] = createSelectContext(SELECT_NAME);\nvar Select = props => {\n  const {\n    __scopeSelect,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    value: valueProp,\n    defaultValue,\n    onValueChange,\n    dir,\n    name,\n    autoComplete,\n    disabled,\n    required,\n    form\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  const [trigger, setTrigger] = React.useState(null);\n  const [valueNode, setValueNode] = React.useState(null);\n  const [valueNodeHasChildren, setValueNodeHasChildren] = React.useState(false);\n  const direction = useDirection(dir);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n    caller: SELECT_NAME\n  });\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n    caller: SELECT_NAME\n  });\n  const triggerPointerDownPosRef = React.useRef(null);\n  const isFormControl = trigger ? form || !!trigger.closest(\"form\") : true;\n  const [nativeOptionsSet, setNativeOptionsSet] = React.useState(/* @__PURE__ */new Set());\n  const nativeSelectKey = Array.from(nativeOptionsSet).map(option => option.props.value).join(\";\");\n  return /* @__PURE__ */jsx(PopperPrimitive.Root, {\n    ...popperScope,\n    children: /* @__PURE__ */jsxs(SelectProvider, {\n      required,\n      scope: __scopeSelect,\n      trigger,\n      onTriggerChange: setTrigger,\n      valueNode,\n      onValueNodeChange: setValueNode,\n      valueNodeHasChildren,\n      onValueNodeHasChildrenChange: setValueNodeHasChildren,\n      contentId: useId(),\n      value,\n      onValueChange: setValue,\n      open,\n      onOpenChange: setOpen,\n      dir: direction,\n      triggerPointerDownPosRef,\n      disabled,\n      children: [/* @__PURE__ */jsx(Collection.Provider, {\n        scope: __scopeSelect,\n        children: /* @__PURE__ */jsx(SelectNativeOptionsProvider, {\n          scope: props.__scopeSelect,\n          onNativeOptionAdd: React.useCallback(option => {\n            setNativeOptionsSet(prev => new Set(prev).add(option));\n          }, []),\n          onNativeOptionRemove: React.useCallback(option => {\n            setNativeOptionsSet(prev => {\n              const optionsSet = new Set(prev);\n              optionsSet.delete(option);\n              return optionsSet;\n            });\n          }, []),\n          children\n        })\n      }), isFormControl ? /* @__PURE__ */jsxs(SelectBubbleInput, {\n        \"aria-hidden\": true,\n        required,\n        tabIndex: -1,\n        name,\n        autoComplete,\n        value,\n        onChange: event => setValue(event.target.value),\n        disabled,\n        form,\n        children: [value === void 0 ? /* @__PURE__ */jsx(\"option\", {\n          value: \"\"\n        }) : null, Array.from(nativeOptionsSet)]\n      }, nativeSelectKey) : null]\n    })\n  });\n};\nSelect.displayName = SELECT_NAME;\nvar TRIGGER_NAME = \"SelectTrigger\";\nvar SelectTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    disabled = false,\n    ...triggerProps\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  const context = useSelectContext(TRIGGER_NAME, __scopeSelect);\n  const isDisabled = context.disabled || disabled;\n  const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);\n  const getItems = useCollection(__scopeSelect);\n  const pointerTypeRef = React.useRef(\"touch\");\n  const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch(search => {\n    const enabledItems = getItems().filter(item => !item.disabled);\n    const currentItem = enabledItems.find(item => item.value === context.value);\n    const nextItem = findNextItem(enabledItems, search, currentItem);\n    if (nextItem !== void 0) {\n      context.onValueChange(nextItem.value);\n    }\n  });\n  const handleOpen = pointerEvent => {\n    if (!isDisabled) {\n      context.onOpenChange(true);\n      resetTypeahead();\n    }\n    if (pointerEvent) {\n      context.triggerPointerDownPosRef.current = {\n        x: Math.round(pointerEvent.pageX),\n        y: Math.round(pointerEvent.pageY)\n      };\n    }\n  };\n  return /* @__PURE__ */jsx(PopperPrimitive.Anchor, {\n    asChild: true,\n    ...popperScope,\n    children: /* @__PURE__ */jsx(Primitive.button, {\n      type: \"button\",\n      role: \"combobox\",\n      \"aria-controls\": context.contentId,\n      \"aria-expanded\": context.open,\n      \"aria-required\": context.required,\n      \"aria-autocomplete\": \"none\",\n      dir: context.dir,\n      \"data-state\": context.open ? \"open\" : \"closed\",\n      disabled: isDisabled,\n      \"data-disabled\": isDisabled ? \"\" : void 0,\n      \"data-placeholder\": shouldShowPlaceholder(context.value) ? \"\" : void 0,\n      ...triggerProps,\n      ref: composedRefs,\n      onClick: composeEventHandlers(triggerProps.onClick, event => {\n        event.currentTarget.focus();\n        if (pointerTypeRef.current !== \"mouse\") {\n          handleOpen(event);\n        }\n      }),\n      onPointerDown: composeEventHandlers(triggerProps.onPointerDown, event => {\n        pointerTypeRef.current = event.pointerType;\n        const target = event.target;\n        if (target.hasPointerCapture(event.pointerId)) {\n          target.releasePointerCapture(event.pointerId);\n        }\n        if (event.button === 0 && event.ctrlKey === false && event.pointerType === \"mouse\") {\n          handleOpen(event);\n          event.preventDefault();\n        }\n      }),\n      onKeyDown: composeEventHandlers(triggerProps.onKeyDown, event => {\n        const isTypingAhead = searchRef.current !== \"\";\n        const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n        if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n        if (isTypingAhead && event.key === \" \") return;\n        if (OPEN_KEYS.includes(event.key)) {\n          handleOpen();\n          event.preventDefault();\n        }\n      })\n    })\n  });\n});\nSelectTrigger.displayName = TRIGGER_NAME;\nvar VALUE_NAME = \"SelectValue\";\nvar SelectValue = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    className,\n    style,\n    children,\n    placeholder = \"\",\n    ...valueProps\n  } = props;\n  const context = useSelectContext(VALUE_NAME, __scopeSelect);\n  const {\n    onValueNodeHasChildrenChange\n  } = context;\n  const hasChildren = children !== void 0;\n  const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);\n  useLayoutEffect(() => {\n    onValueNodeHasChildrenChange(hasChildren);\n  }, [onValueNodeHasChildrenChange, hasChildren]);\n  return /* @__PURE__ */jsx(Primitive.span, {\n    ...valueProps,\n    ref: composedRefs,\n    style: {\n      pointerEvents: \"none\"\n    },\n    children: shouldShowPlaceholder(context.value) ? /* @__PURE__ */jsx(Fragment, {\n      children: placeholder\n    }) : children\n  });\n});\nSelectValue.displayName = VALUE_NAME;\nvar ICON_NAME = \"SelectIcon\";\nvar SelectIcon = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    children,\n    ...iconProps\n  } = props;\n  return /* @__PURE__ */jsx(Primitive.span, {\n    \"aria-hidden\": true,\n    ...iconProps,\n    ref: forwardedRef,\n    children: children || \"\\u25BC\"\n  });\n});\nSelectIcon.displayName = ICON_NAME;\nvar PORTAL_NAME = \"SelectPortal\";\nvar SelectPortal = props => {\n  return /* @__PURE__ */jsx(PortalPrimitive, {\n    asChild: true,\n    ...props\n  });\n};\nSelectPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"SelectContent\";\nvar SelectContent = React.forwardRef((props, forwardedRef) => {\n  const context = useSelectContext(CONTENT_NAME, props.__scopeSelect);\n  const [fragment, setFragment] = React.useState();\n  useLayoutEffect(() => {\n    setFragment(new DocumentFragment());\n  }, []);\n  if (!context.open) {\n    const frag = fragment;\n    return frag ? ReactDOM.createPortal(/* @__PURE__ */jsx(SelectContentProvider, {\n      scope: props.__scopeSelect,\n      children: /* @__PURE__ */jsx(Collection.Slot, {\n        scope: props.__scopeSelect,\n        children: /* @__PURE__ */jsx(\"div\", {\n          children: props.children\n        })\n      })\n    }), frag) : null;\n  }\n  return /* @__PURE__ */jsx(SelectContentImpl, {\n    ...props,\n    ref: forwardedRef\n  });\n});\nSelectContent.displayName = CONTENT_NAME;\nvar CONTENT_MARGIN = 10;\nvar [SelectContentProvider, useSelectContentContext] = createSelectContext(CONTENT_NAME);\nvar CONTENT_IMPL_NAME = \"SelectContentImpl\";\nvar Slot = createSlot(\"SelectContent.RemoveScroll\");\nvar SelectContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    position = \"item-aligned\",\n    onCloseAutoFocus,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    //\n    // PopperContent props\n    side,\n    sideOffset,\n    align,\n    alignOffset,\n    arrowPadding,\n    collisionBoundary,\n    collisionPadding,\n    sticky,\n    hideWhenDetached,\n    avoidCollisions,\n    //\n    ...contentProps\n  } = props;\n  const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n  const [content, setContent] = React.useState(null);\n  const [viewport, setViewport] = React.useState(null);\n  const composedRefs = useComposedRefs(forwardedRef, node => setContent(node));\n  const [selectedItem, setSelectedItem] = React.useState(null);\n  const [selectedItemText, setSelectedItemText] = React.useState(null);\n  const getItems = useCollection(__scopeSelect);\n  const [isPositioned, setIsPositioned] = React.useState(false);\n  const firstValidItemFoundRef = React.useRef(false);\n  React.useEffect(() => {\n    if (content) return hideOthers(content);\n  }, [content]);\n  useFocusGuards();\n  const focusFirst = React.useCallback(candidates => {\n    const [firstItem, ...restItems] = getItems().map(item => item.ref.current);\n    const [lastItem] = restItems.slice(-1);\n    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n    for (const candidate of candidates) {\n      if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n      candidate?.scrollIntoView({\n        block: \"nearest\"\n      });\n      if (candidate === firstItem && viewport) viewport.scrollTop = 0;\n      if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;\n      candidate?.focus();\n      if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n    }\n  }, [getItems, viewport]);\n  const focusSelectedItem = React.useCallback(() => focusFirst([selectedItem, content]), [focusFirst, selectedItem, content]);\n  React.useEffect(() => {\n    if (isPositioned) {\n      focusSelectedItem();\n    }\n  }, [isPositioned, focusSelectedItem]);\n  const {\n    onOpenChange,\n    triggerPointerDownPosRef\n  } = context;\n  React.useEffect(() => {\n    if (content) {\n      let pointerMoveDelta = {\n        x: 0,\n        y: 0\n      };\n      const handlePointerMove = event => {\n        pointerMoveDelta = {\n          x: Math.abs(Math.round(event.pageX) - (triggerPointerDownPosRef.current?.x ?? 0)),\n          y: Math.abs(Math.round(event.pageY) - (triggerPointerDownPosRef.current?.y ?? 0))\n        };\n      };\n      const handlePointerUp = event => {\n        if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {\n          event.preventDefault();\n        } else {\n          if (!content.contains(event.target)) {\n            onOpenChange(false);\n          }\n        }\n        document.removeEventListener(\"pointermove\", handlePointerMove);\n        triggerPointerDownPosRef.current = null;\n      };\n      if (triggerPointerDownPosRef.current !== null) {\n        document.addEventListener(\"pointermove\", handlePointerMove);\n        document.addEventListener(\"pointerup\", handlePointerUp, {\n          capture: true,\n          once: true\n        });\n      }\n      return () => {\n        document.removeEventListener(\"pointermove\", handlePointerMove);\n        document.removeEventListener(\"pointerup\", handlePointerUp, {\n          capture: true\n        });\n      };\n    }\n  }, [content, onOpenChange, triggerPointerDownPosRef]);\n  React.useEffect(() => {\n    const close = () => onOpenChange(false);\n    window.addEventListener(\"blur\", close);\n    window.addEventListener(\"resize\", close);\n    return () => {\n      window.removeEventListener(\"blur\", close);\n      window.removeEventListener(\"resize\", close);\n    };\n  }, [onOpenChange]);\n  const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch(search => {\n    const enabledItems = getItems().filter(item => !item.disabled);\n    const currentItem = enabledItems.find(item => item.ref.current === document.activeElement);\n    const nextItem = findNextItem(enabledItems, search, currentItem);\n    if (nextItem) {\n      setTimeout(() => nextItem.ref.current.focus());\n    }\n  });\n  const itemRefCallback = React.useCallback((node, value, disabled) => {\n    const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n    const isSelectedItem = context.value !== void 0 && context.value === value;\n    if (isSelectedItem || isFirstValidItem) {\n      setSelectedItem(node);\n      if (isFirstValidItem) firstValidItemFoundRef.current = true;\n    }\n  }, [context.value]);\n  const handleItemLeave = React.useCallback(() => content?.focus(), [content]);\n  const itemTextRefCallback = React.useCallback((node, value, disabled) => {\n    const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n    const isSelectedItem = context.value !== void 0 && context.value === value;\n    if (isSelectedItem || isFirstValidItem) {\n      setSelectedItemText(node);\n    }\n  }, [context.value]);\n  const SelectPosition = position === \"popper\" ? SelectPopperPosition : SelectItemAlignedPosition;\n  const popperContentProps = SelectPosition === SelectPopperPosition ? {\n    side,\n    sideOffset,\n    align,\n    alignOffset,\n    arrowPadding,\n    collisionBoundary,\n    collisionPadding,\n    sticky,\n    hideWhenDetached,\n    avoidCollisions\n  } : {};\n  return /* @__PURE__ */jsx(SelectContentProvider, {\n    scope: __scopeSelect,\n    content,\n    viewport,\n    onViewportChange: setViewport,\n    itemRefCallback,\n    selectedItem,\n    onItemLeave: handleItemLeave,\n    itemTextRefCallback,\n    focusSelectedItem,\n    selectedItemText,\n    position,\n    isPositioned,\n    searchRef,\n    children: /* @__PURE__ */jsx(RemoveScroll, {\n      as: Slot,\n      allowPinchZoom: true,\n      children: /* @__PURE__ */jsx(FocusScope, {\n        asChild: true,\n        trapped: context.open,\n        onMountAutoFocus: event => {\n          event.preventDefault();\n        },\n        onUnmountAutoFocus: composeEventHandlers(onCloseAutoFocus, event => {\n          context.trigger?.focus({\n            preventScroll: true\n          });\n          event.preventDefault();\n        }),\n        children: /* @__PURE__ */jsx(DismissableLayer, {\n          asChild: true,\n          disableOutsidePointerEvents: true,\n          onEscapeKeyDown,\n          onPointerDownOutside,\n          onFocusOutside: event => event.preventDefault(),\n          onDismiss: () => context.onOpenChange(false),\n          children: /* @__PURE__ */jsx(SelectPosition, {\n            role: \"listbox\",\n            id: context.contentId,\n            \"data-state\": context.open ? \"open\" : \"closed\",\n            dir: context.dir,\n            onContextMenu: event => event.preventDefault(),\n            ...contentProps,\n            ...popperContentProps,\n            onPlaced: () => setIsPositioned(true),\n            ref: composedRefs,\n            style: {\n              // flex layout so we can place the scroll buttons properly\n              display: \"flex\",\n              flexDirection: \"column\",\n              // reset the outline by default as the content MAY get focused\n              outline: \"none\",\n              ...contentProps.style\n            },\n            onKeyDown: composeEventHandlers(contentProps.onKeyDown, event => {\n              const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n              if (event.key === \"Tab\") event.preventDefault();\n              if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n              if ([\"ArrowUp\", \"ArrowDown\", \"Home\", \"End\"].includes(event.key)) {\n                const items = getItems().filter(item => !item.disabled);\n                let candidateNodes = items.map(item => item.ref.current);\n                if ([\"ArrowUp\", \"End\"].includes(event.key)) {\n                  candidateNodes = candidateNodes.slice().reverse();\n                }\n                if ([\"ArrowUp\", \"ArrowDown\"].includes(event.key)) {\n                  const currentElement = event.target;\n                  const currentIndex = candidateNodes.indexOf(currentElement);\n                  candidateNodes = candidateNodes.slice(currentIndex + 1);\n                }\n                setTimeout(() => focusFirst(candidateNodes));\n                event.preventDefault();\n              }\n            })\n          })\n        })\n      })\n    })\n  });\n});\nSelectContentImpl.displayName = CONTENT_IMPL_NAME;\nvar ITEM_ALIGNED_POSITION_NAME = \"SelectItemAlignedPosition\";\nvar SelectItemAlignedPosition = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    onPlaced,\n    ...popperProps\n  } = props;\n  const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(CONTENT_NAME, __scopeSelect);\n  const [contentWrapper, setContentWrapper] = React.useState(null);\n  const [content, setContent] = React.useState(null);\n  const composedRefs = useComposedRefs(forwardedRef, node => setContent(node));\n  const getItems = useCollection(__scopeSelect);\n  const shouldExpandOnScrollRef = React.useRef(false);\n  const shouldRepositionRef = React.useRef(true);\n  const {\n    viewport,\n    selectedItem,\n    selectedItemText,\n    focusSelectedItem\n  } = contentContext;\n  const position = React.useCallback(() => {\n    if (context.trigger && context.valueNode && contentWrapper && content && viewport && selectedItem && selectedItemText) {\n      const triggerRect = context.trigger.getBoundingClientRect();\n      const contentRect = content.getBoundingClientRect();\n      const valueNodeRect = context.valueNode.getBoundingClientRect();\n      const itemTextRect = selectedItemText.getBoundingClientRect();\n      if (context.dir !== \"rtl\") {\n        const itemTextOffset = itemTextRect.left - contentRect.left;\n        const left = valueNodeRect.left - itemTextOffset;\n        const leftDelta = triggerRect.left - left;\n        const minContentWidth = triggerRect.width + leftDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const rightEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedLeft = clamp(left, [CONTENT_MARGIN,\n        // Prevents the content from going off the starting edge of the\n        // viewport. It may still go off the ending edge, but this can be\n        // controlled by the user since they may want to manage overflow in a\n        // specific way.\n        // https://github.com/radix-ui/primitives/issues/2049\n        Math.max(CONTENT_MARGIN, rightEdge - contentWidth)]);\n        contentWrapper.style.minWidth = minContentWidth + \"px\";\n        contentWrapper.style.left = clampedLeft + \"px\";\n      } else {\n        const itemTextOffset = contentRect.right - itemTextRect.right;\n        const right = window.innerWidth - valueNodeRect.right - itemTextOffset;\n        const rightDelta = window.innerWidth - triggerRect.right - right;\n        const minContentWidth = triggerRect.width + rightDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const leftEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedRight = clamp(right, [CONTENT_MARGIN, Math.max(CONTENT_MARGIN, leftEdge - contentWidth)]);\n        contentWrapper.style.minWidth = minContentWidth + \"px\";\n        contentWrapper.style.right = clampedRight + \"px\";\n      }\n      const items = getItems();\n      const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n      const itemsHeight = viewport.scrollHeight;\n      const contentStyles = window.getComputedStyle(content);\n      const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);\n      const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n      const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);\n      const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);\n      const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth;\n      const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);\n      const viewportStyles = window.getComputedStyle(viewport);\n      const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);\n      const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);\n      const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;\n      const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;\n      const selectedItemHalfHeight = selectedItem.offsetHeight / 2;\n      const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;\n      const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;\n      const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;\n      const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;\n      if (willAlignWithoutTopOverflow) {\n        const isLastItem = items.length > 0 && selectedItem === items[items.length - 1].ref.current;\n        contentWrapper.style.bottom = \"0px\";\n        const viewportOffsetBottom = content.clientHeight - viewport.offsetTop - viewport.offsetHeight;\n        const clampedTriggerMiddleToBottomEdge = Math.max(triggerMiddleToBottomEdge, selectedItemHalfHeight + (\n        // viewport might have padding bottom, include it to avoid a scrollable viewport\n        isLastItem ? viewportPaddingBottom : 0) + viewportOffsetBottom + contentBorderBottomWidth);\n        const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;\n        contentWrapper.style.height = height + \"px\";\n      } else {\n        const isFirstItem = items.length > 0 && selectedItem === items[0].ref.current;\n        contentWrapper.style.top = \"0px\";\n        const clampedTopEdgeToTriggerMiddle = Math.max(topEdgeToTriggerMiddle, contentBorderTopWidth + viewport.offsetTop + (\n        // viewport might have padding top, include it to avoid a scrollable viewport\n        isFirstItem ? viewportPaddingTop : 0) + selectedItemHalfHeight);\n        const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;\n        contentWrapper.style.height = height + \"px\";\n        viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;\n      }\n      contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;\n      contentWrapper.style.minHeight = minContentHeight + \"px\";\n      contentWrapper.style.maxHeight = availableHeight + \"px\";\n      onPlaced?.();\n      requestAnimationFrame(() => shouldExpandOnScrollRef.current = true);\n    }\n  }, [getItems, context.trigger, context.valueNode, contentWrapper, content, viewport, selectedItem, selectedItemText, context.dir, onPlaced]);\n  useLayoutEffect(() => position(), [position]);\n  const [contentZIndex, setContentZIndex] = React.useState();\n  useLayoutEffect(() => {\n    if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n  }, [content]);\n  const handleScrollButtonChange = React.useCallback(node => {\n    if (node && shouldRepositionRef.current === true) {\n      position();\n      focusSelectedItem?.();\n      shouldRepositionRef.current = false;\n    }\n  }, [position, focusSelectedItem]);\n  return /* @__PURE__ */jsx(SelectViewportProvider, {\n    scope: __scopeSelect,\n    contentWrapper,\n    shouldExpandOnScrollRef,\n    onScrollButtonChange: handleScrollButtonChange,\n    children: /* @__PURE__ */jsx(\"div\", {\n      ref: setContentWrapper,\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"fixed\",\n        zIndex: contentZIndex\n      },\n      children: /* @__PURE__ */jsx(Primitive.div, {\n        ...popperProps,\n        ref: composedRefs,\n        style: {\n          // When we get the height of the content, it includes borders. If we were to set\n          // the height without having `boxSizing: 'border-box'` it would be too big.\n          boxSizing: \"border-box\",\n          // We need to ensure the content doesn't get taller than the wrapper\n          maxHeight: \"100%\",\n          ...popperProps.style\n        }\n      })\n    })\n  });\n});\nSelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;\nvar POPPER_POSITION_NAME = \"SelectPopperPosition\";\nvar SelectPopperPosition = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    align = \"start\",\n    collisionPadding = CONTENT_MARGIN,\n    ...popperProps\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  return /* @__PURE__ */jsx(PopperPrimitive.Content, {\n    ...popperScope,\n    ...popperProps,\n    ref: forwardedRef,\n    align,\n    collisionPadding,\n    style: {\n      // Ensure border-box for floating-ui calculations\n      boxSizing: \"border-box\",\n      ...popperProps.style,\n      // re-namespace exposed content custom properties\n      ...{\n        \"--radix-select-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n        \"--radix-select-content-available-width\": \"var(--radix-popper-available-width)\",\n        \"--radix-select-content-available-height\": \"var(--radix-popper-available-height)\",\n        \"--radix-select-trigger-width\": \"var(--radix-popper-anchor-width)\",\n        \"--radix-select-trigger-height\": \"var(--radix-popper-anchor-height)\"\n      }\n    }\n  });\n});\nSelectPopperPosition.displayName = POPPER_POSITION_NAME;\nvar [SelectViewportProvider, useSelectViewportContext] = createSelectContext(CONTENT_NAME, {});\nvar VIEWPORT_NAME = \"SelectViewport\";\nvar SelectViewport = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    nonce,\n    ...viewportProps\n  } = props;\n  const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);\n  const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);\n  const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);\n  const prevScrollTopRef = React.useRef(0);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(\"style\", {\n      dangerouslySetInnerHTML: {\n        __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`\n      },\n      nonce\n    }), /* @__PURE__ */jsx(Collection.Slot, {\n      scope: __scopeSelect,\n      children: /* @__PURE__ */jsx(Primitive.div, {\n        \"data-radix-select-viewport\": \"\",\n        role: \"presentation\",\n        ...viewportProps,\n        ref: composedRefs,\n        style: {\n          // we use position: 'relative' here on the `viewport` so that when we call\n          // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport\n          // (independent of the scrollUpButton).\n          position: \"relative\",\n          flex: 1,\n          // Viewport should only be scrollable in the vertical direction.\n          // This won't work in vertical writing modes, so we'll need to\n          // revisit this if/when that is supported\n          // https://developer.chrome.com/blog/vertical-form-controls\n          overflow: \"hidden auto\",\n          ...viewportProps.style\n        },\n        onScroll: composeEventHandlers(viewportProps.onScroll, event => {\n          const viewport = event.currentTarget;\n          const {\n            contentWrapper,\n            shouldExpandOnScrollRef\n          } = viewportContext;\n          if (shouldExpandOnScrollRef?.current && contentWrapper) {\n            const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);\n            if (scrolledBy > 0) {\n              const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n              const cssMinHeight = parseFloat(contentWrapper.style.minHeight);\n              const cssHeight = parseFloat(contentWrapper.style.height);\n              const prevHeight = Math.max(cssMinHeight, cssHeight);\n              if (prevHeight < availableHeight) {\n                const nextHeight = prevHeight + scrolledBy;\n                const clampedNextHeight = Math.min(availableHeight, nextHeight);\n                const heightDiff = nextHeight - clampedNextHeight;\n                contentWrapper.style.height = clampedNextHeight + \"px\";\n                if (contentWrapper.style.bottom === \"0px\") {\n                  viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;\n                  contentWrapper.style.justifyContent = \"flex-end\";\n                }\n              }\n            }\n          }\n          prevScrollTopRef.current = viewport.scrollTop;\n        })\n      })\n    })]\n  });\n});\nSelectViewport.displayName = VIEWPORT_NAME;\nvar GROUP_NAME = \"SelectGroup\";\nvar [SelectGroupContextProvider, useSelectGroupContext] = createSelectContext(GROUP_NAME);\nvar SelectGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    ...groupProps\n  } = props;\n  const groupId = useId();\n  return /* @__PURE__ */jsx(SelectGroupContextProvider, {\n    scope: __scopeSelect,\n    id: groupId,\n    children: /* @__PURE__ */jsx(Primitive.div, {\n      role: \"group\",\n      \"aria-labelledby\": groupId,\n      ...groupProps,\n      ref: forwardedRef\n    })\n  });\n});\nSelectGroup.displayName = GROUP_NAME;\nvar LABEL_NAME = \"SelectLabel\";\nvar SelectLabel = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    ...labelProps\n  } = props;\n  const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);\n  return /* @__PURE__ */jsx(Primitive.div, {\n    id: groupContext.id,\n    ...labelProps,\n    ref: forwardedRef\n  });\n});\nSelectLabel.displayName = LABEL_NAME;\nvar ITEM_NAME = \"SelectItem\";\nvar [SelectItemContextProvider, useSelectItemContext] = createSelectContext(ITEM_NAME);\nvar SelectItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    value,\n    disabled = false,\n    textValue: textValueProp,\n    ...itemProps\n  } = props;\n  const context = useSelectContext(ITEM_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);\n  const isSelected = context.value === value;\n  const [textValue, setTextValue] = React.useState(textValueProp ?? \"\");\n  const [isFocused, setIsFocused] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, node => contentContext.itemRefCallback?.(node, value, disabled));\n  const textId = useId();\n  const pointerTypeRef = React.useRef(\"touch\");\n  const handleSelect = () => {\n    if (!disabled) {\n      context.onValueChange(value);\n      context.onOpenChange(false);\n    }\n  };\n  if (value === \"\") {\n    throw new Error(\"A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder.\");\n  }\n  return /* @__PURE__ */jsx(SelectItemContextProvider, {\n    scope: __scopeSelect,\n    value,\n    disabled,\n    textId,\n    isSelected,\n    onItemTextChange: React.useCallback(node => {\n      setTextValue(prevTextValue => prevTextValue || (node?.textContent ?? \"\").trim());\n    }, []),\n    children: /* @__PURE__ */jsx(Collection.ItemSlot, {\n      scope: __scopeSelect,\n      value,\n      disabled,\n      textValue,\n      children: /* @__PURE__ */jsx(Primitive.div, {\n        role: \"option\",\n        \"aria-labelledby\": textId,\n        \"data-highlighted\": isFocused ? \"\" : void 0,\n        \"aria-selected\": isSelected && isFocused,\n        \"data-state\": isSelected ? \"checked\" : \"unchecked\",\n        \"aria-disabled\": disabled || void 0,\n        \"data-disabled\": disabled ? \"\" : void 0,\n        tabIndex: disabled ? void 0 : -1,\n        ...itemProps,\n        ref: composedRefs,\n        onFocus: composeEventHandlers(itemProps.onFocus, () => setIsFocused(true)),\n        onBlur: composeEventHandlers(itemProps.onBlur, () => setIsFocused(false)),\n        onClick: composeEventHandlers(itemProps.onClick, () => {\n          if (pointerTypeRef.current !== \"mouse\") handleSelect();\n        }),\n        onPointerUp: composeEventHandlers(itemProps.onPointerUp, () => {\n          if (pointerTypeRef.current === \"mouse\") handleSelect();\n        }),\n        onPointerDown: composeEventHandlers(itemProps.onPointerDown, event => {\n          pointerTypeRef.current = event.pointerType;\n        }),\n        onPointerMove: composeEventHandlers(itemProps.onPointerMove, event => {\n          pointerTypeRef.current = event.pointerType;\n          if (disabled) {\n            contentContext.onItemLeave?.();\n          } else if (pointerTypeRef.current === \"mouse\") {\n            event.currentTarget.focus({\n              preventScroll: true\n            });\n          }\n        }),\n        onPointerLeave: composeEventHandlers(itemProps.onPointerLeave, event => {\n          if (event.currentTarget === document.activeElement) {\n            contentContext.onItemLeave?.();\n          }\n        }),\n        onKeyDown: composeEventHandlers(itemProps.onKeyDown, event => {\n          const isTypingAhead = contentContext.searchRef?.current !== \"\";\n          if (isTypingAhead && event.key === \" \") return;\n          if (SELECTION_KEYS.includes(event.key)) handleSelect();\n          if (event.key === \" \") event.preventDefault();\n        })\n      })\n    })\n  });\n});\nSelectItem.displayName = ITEM_NAME;\nvar ITEM_TEXT_NAME = \"SelectItemText\";\nvar SelectItemText = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    className,\n    style,\n    ...itemTextProps\n  } = props;\n  const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);\n  const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);\n  const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);\n  const [itemTextNode, setItemTextNode] = React.useState(null);\n  const composedRefs = useComposedRefs(forwardedRef, node => setItemTextNode(node), itemContext.onItemTextChange, node => contentContext.itemTextRefCallback?.(node, itemContext.value, itemContext.disabled));\n  const textContent = itemTextNode?.textContent;\n  const nativeOption = React.useMemo(() => /* @__PURE__ */jsx(\"option\", {\n    value: itemContext.value,\n    disabled: itemContext.disabled,\n    children: textContent\n  }, itemContext.value), [itemContext.disabled, itemContext.value, textContent]);\n  const {\n    onNativeOptionAdd,\n    onNativeOptionRemove\n  } = nativeOptionsContext;\n  useLayoutEffect(() => {\n    onNativeOptionAdd(nativeOption);\n    return () => onNativeOptionRemove(nativeOption);\n  }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(Primitive.span, {\n      id: itemContext.textId,\n      ...itemTextProps,\n      ref: composedRefs\n    }), itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren ? ReactDOM.createPortal(itemTextProps.children, context.valueNode) : null]\n  });\n});\nSelectItemText.displayName = ITEM_TEXT_NAME;\nvar ITEM_INDICATOR_NAME = \"SelectItemIndicator\";\nvar SelectItemIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    ...itemIndicatorProps\n  } = props;\n  const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);\n  return itemContext.isSelected ? /* @__PURE__ */jsx(Primitive.span, {\n    \"aria-hidden\": true,\n    ...itemIndicatorProps,\n    ref: forwardedRef\n  }) : null;\n});\nSelectItemIndicator.displayName = ITEM_INDICATOR_NAME;\nvar SCROLL_UP_BUTTON_NAME = \"SelectScrollUpButton\";\nvar SelectScrollUpButton = React.forwardRef((props, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollUp, setCanScrollUp] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      let handleScroll2 = function () {\n        const canScrollUp2 = viewport.scrollTop > 0;\n        setCanScrollUp(canScrollUp2);\n      };\n      var handleScroll = handleScroll2;\n      const viewport = contentContext.viewport;\n      handleScroll2();\n      viewport.addEventListener(\"scroll\", handleScroll2);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll2);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n  return canScrollUp ? /* @__PURE__ */jsx(SelectScrollButtonImpl, {\n    ...props,\n    ref: composedRefs,\n    onAutoScroll: () => {\n      const {\n        viewport,\n        selectedItem\n      } = contentContext;\n      if (viewport && selectedItem) {\n        viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;\n      }\n    }\n  }) : null;\n});\nSelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;\nvar SCROLL_DOWN_BUTTON_NAME = \"SelectScrollDownButton\";\nvar SelectScrollDownButton = React.forwardRef((props, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollDown, setCanScrollDown] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      let handleScroll2 = function () {\n        const maxScroll = viewport.scrollHeight - viewport.clientHeight;\n        const canScrollDown2 = Math.ceil(viewport.scrollTop) < maxScroll;\n        setCanScrollDown(canScrollDown2);\n      };\n      var handleScroll = handleScroll2;\n      const viewport = contentContext.viewport;\n      handleScroll2();\n      viewport.addEventListener(\"scroll\", handleScroll2);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll2);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n  return canScrollDown ? /* @__PURE__ */jsx(SelectScrollButtonImpl, {\n    ...props,\n    ref: composedRefs,\n    onAutoScroll: () => {\n      const {\n        viewport,\n        selectedItem\n      } = contentContext;\n      if (viewport && selectedItem) {\n        viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;\n      }\n    }\n  }) : null;\n});\nSelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;\nvar SelectScrollButtonImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    onAutoScroll,\n    ...scrollIndicatorProps\n  } = props;\n  const contentContext = useSelectContentContext(\"SelectScrollButton\", __scopeSelect);\n  const autoScrollTimerRef = React.useRef(null);\n  const getItems = useCollection(__scopeSelect);\n  const clearAutoScrollTimer = React.useCallback(() => {\n    if (autoScrollTimerRef.current !== null) {\n      window.clearInterval(autoScrollTimerRef.current);\n      autoScrollTimerRef.current = null;\n    }\n  }, []);\n  React.useEffect(() => {\n    return () => clearAutoScrollTimer();\n  }, [clearAutoScrollTimer]);\n  useLayoutEffect(() => {\n    const activeItem = getItems().find(item => item.ref.current === document.activeElement);\n    activeItem?.ref.current?.scrollIntoView({\n      block: \"nearest\"\n    });\n  }, [getItems]);\n  return /* @__PURE__ */jsx(Primitive.div, {\n    \"aria-hidden\": true,\n    ...scrollIndicatorProps,\n    ref: forwardedRef,\n    style: {\n      flexShrink: 0,\n      ...scrollIndicatorProps.style\n    },\n    onPointerDown: composeEventHandlers(scrollIndicatorProps.onPointerDown, () => {\n      if (autoScrollTimerRef.current === null) {\n        autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n      }\n    }),\n    onPointerMove: composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {\n      contentContext.onItemLeave?.();\n      if (autoScrollTimerRef.current === null) {\n        autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n      }\n    }),\n    onPointerLeave: composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {\n      clearAutoScrollTimer();\n    })\n  });\n});\nvar SEPARATOR_NAME = \"SelectSeparator\";\nvar SelectSeparator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    ...separatorProps\n  } = props;\n  return /* @__PURE__ */jsx(Primitive.div, {\n    \"aria-hidden\": true,\n    ...separatorProps,\n    ref: forwardedRef\n  });\n});\nSelectSeparator.displayName = SEPARATOR_NAME;\nvar ARROW_NAME = \"SelectArrow\";\nvar SelectArrow = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    ...arrowProps\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  const context = useSelectContext(ARROW_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(ARROW_NAME, __scopeSelect);\n  return context.open && contentContext.position === \"popper\" ? /* @__PURE__ */jsx(PopperPrimitive.Arrow, {\n    ...popperScope,\n    ...arrowProps,\n    ref: forwardedRef\n  }) : null;\n});\nSelectArrow.displayName = ARROW_NAME;\nvar BUBBLE_INPUT_NAME = \"SelectBubbleInput\";\nvar SelectBubbleInput = React.forwardRef(({\n  __scopeSelect,\n  value,\n  ...props\n}, forwardedRef) => {\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const prevValue = usePrevious(value);\n  React.useEffect(() => {\n    const select = ref.current;\n    if (!select) return;\n    const selectProto = window.HTMLSelectElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(selectProto, \"value\");\n    const setValue = descriptor.set;\n    if (prevValue !== value && setValue) {\n      const event = new Event(\"change\", {\n        bubbles: true\n      });\n      setValue.call(select, value);\n      select.dispatchEvent(event);\n    }\n  }, [prevValue, value]);\n  return /* @__PURE__ */jsx(Primitive.select, {\n    ...props,\n    style: {\n      ...VISUALLY_HIDDEN_STYLES,\n      ...props.style\n    },\n    ref: composedRefs,\n    defaultValue: value\n  });\n});\nSelectBubbleInput.displayName = BUBBLE_INPUT_NAME;\nfunction shouldShowPlaceholder(value) {\n  return value === \"\" || value === void 0;\n}\nfunction useTypeaheadSearch(onSearchChange) {\n  const handleSearchChange = useCallbackRef(onSearchChange);\n  const searchRef = React.useRef(\"\");\n  const timerRef = React.useRef(0);\n  const handleTypeaheadSearch = React.useCallback(key => {\n    const search = searchRef.current + key;\n    handleSearchChange(search);\n    (function updateSearch(value) {\n      searchRef.current = value;\n      window.clearTimeout(timerRef.current);\n      if (value !== \"\") timerRef.current = window.setTimeout(() => updateSearch(\"\"), 1e3);\n    })(search);\n  }, [handleSearchChange]);\n  const resetTypeahead = React.useCallback(() => {\n    searchRef.current = \"\";\n    window.clearTimeout(timerRef.current);\n  }, []);\n  React.useEffect(() => {\n    return () => window.clearTimeout(timerRef.current);\n  }, []);\n  return [searchRef, handleTypeaheadSearch, resetTypeahead];\n}\nfunction findNextItem(items, search, currentItem) {\n  const isRepeated = search.length > 1 && Array.from(search).every(char => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0] : search;\n  const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;\n  let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));\n  const excludeCurrentItem = normalizedSearch.length === 1;\n  if (excludeCurrentItem) wrappedItems = wrappedItems.filter(v => v !== currentItem);\n  const nextItem = wrappedItems.find(item => item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase()));\n  return nextItem !== currentItem ? nextItem : void 0;\n}\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\nvar Root2 = Select;\nvar Trigger = SelectTrigger;\nvar Value = SelectValue;\nvar Icon = SelectIcon;\nvar Portal = SelectPortal;\nvar Content2 = SelectContent;\nvar Viewport = SelectViewport;\nvar Group = SelectGroup;\nvar Label = SelectLabel;\nvar Item = SelectItem;\nvar ItemText = SelectItemText;\nvar ItemIndicator = SelectItemIndicator;\nvar ScrollUpButton = SelectScrollUpButton;\nvar ScrollDownButton = SelectScrollDownButton;\nvar Separator = SelectSeparator;\nvar Arrow2 = SelectArrow;\nexport { Arrow2 as Arrow, Content2 as Content, Group, Icon, Item, ItemIndicator, ItemText, Label, Portal, Root2 as Root, ScrollDownButton, ScrollUpButton, Select, SelectArrow, SelectContent, SelectGroup, SelectIcon, SelectItem, SelectItemIndicator, SelectItemText, SelectLabel, SelectPortal, SelectScrollDownButton, SelectScrollUpButton, SelectSeparator, SelectTrigger, SelectValue, SelectViewport, Separator, Trigger, Value, Viewport, createSelectScope };","map":{"version":3,"names":["React","ReactDOM","clamp","composeEventHandlers","createCollection","useComposedRefs","createContextScope","useDirection","DismissableLayer","useFocusGuards","FocusScope","useId","PopperPrimitive","createPopperScope","Portal","PortalPrimitive","Primitive","createSlot","useCallbackRef","useControllableState","useLayoutEffect","usePrevious","VISUALLY_HIDDEN_STYLES","hideOthers","RemoveScroll","Fragment","jsx","jsxs","OPEN_KEYS","SELECTION_KEYS","SELECT_NAME","Collection","useCollection","createCollectionScope","createSelectContext","createSelectScope","usePopperScope","SelectProvider","useSelectContext","SelectNativeOptionsProvider","useSelectNativeOptionsContext","Select","props","__scopeSelect","children","open","openProp","defaultOpen","onOpenChange","value","valueProp","defaultValue","onValueChange","dir","name","autoComplete","disabled","required","form","popperScope","trigger","setTrigger","useState","valueNode","setValueNode","valueNodeHasChildren","setValueNodeHasChildren","direction","setOpen","prop","defaultProp","onChange","caller","setValue","triggerPointerDownPosRef","useRef","isFormControl","closest","nativeOptionsSet","setNativeOptionsSet","Set","nativeSelectKey","Array","from","map","option","join","Root","scope","onTriggerChange","onValueNodeChange","onValueNodeHasChildrenChange","contentId","Provider","onNativeOptionAdd","useCallback","prev","add","onNativeOptionRemove","optionsSet","delete","SelectBubbleInput","tabIndex","event","target","displayName","TRIGGER_NAME","SelectTrigger","forwardRef","forwardedRef","triggerProps","context","isDisabled","composedRefs","getItems","pointerTypeRef","searchRef","handleTypeaheadSearch","resetTypeahead","useTypeaheadSearch","search","enabledItems","filter","item","currentItem","find","nextItem","findNextItem","handleOpen","pointerEvent","current","x","Math","round","pageX","y","pageY","Anchor","asChild","button","type","role","shouldShowPlaceholder","ref","onClick","currentTarget","focus","onPointerDown","pointerType","hasPointerCapture","pointerId","releasePointerCapture","ctrlKey","preventDefault","onKeyDown","isTypingAhead","isModifierKey","altKey","metaKey","key","length","includes","VALUE_NAME","SelectValue","className","style","placeholder","valueProps","hasChildren","span","pointerEvents","ICON_NAME","SelectIcon","iconProps","PORTAL_NAME","SelectPortal","CONTENT_NAME","SelectContent","fragment","setFragment","DocumentFragment","frag","createPortal","SelectContentProvider","Slot","SelectContentImpl","CONTENT_MARGIN","useSelectContentContext","CONTENT_IMPL_NAME","position","onCloseAutoFocus","onEscapeKeyDown","onPointerDownOutside","side","sideOffset","align","alignOffset","arrowPadding","collisionBoundary","collisionPadding","sticky","hideWhenDetached","avoidCollisions","contentProps","content","setContent","viewport","setViewport","node","selectedItem","setSelectedItem","selectedItemText","setSelectedItemText","isPositioned","setIsPositioned","firstValidItemFoundRef","useEffect","focusFirst","candidates","firstItem","restItems","lastItem","slice","PREVIOUSLY_FOCUSED_ELEMENT","document","activeElement","candidate","scrollIntoView","block","scrollTop","scrollHeight","focusSelectedItem","pointerMoveDelta","handlePointerMove","abs","handlePointerUp","contains","removeEventListener","addEventListener","capture","once","close","window","setTimeout","itemRefCallback","isFirstValidItem","isSelectedItem","handleItemLeave","itemTextRefCallback","SelectPosition","SelectPopperPosition","SelectItemAlignedPosition","popperContentProps","onViewportChange","onItemLeave","as","allowPinchZoom","trapped","onMountAutoFocus","onUnmountAutoFocus","preventScroll","disableOutsidePointerEvents","onFocusOutside","onDismiss","id","onContextMenu","onPlaced","display","flexDirection","outline","items","candidateNodes","reverse","currentElement","currentIndex","indexOf","ITEM_ALIGNED_POSITION_NAME","popperProps","contentContext","contentWrapper","setContentWrapper","shouldExpandOnScrollRef","shouldRepositionRef","triggerRect","getBoundingClientRect","contentRect","valueNodeRect","itemTextRect","itemTextOffset","left","leftDelta","minContentWidth","width","contentWidth","max","rightEdge","innerWidth","clampedLeft","minWidth","right","rightDelta","leftEdge","clampedRight","availableHeight","innerHeight","itemsHeight","contentStyles","getComputedStyle","contentBorderTopWidth","parseInt","borderTopWidth","contentPaddingTop","paddingTop","contentBorderBottomWidth","borderBottomWidth","contentPaddingBottom","paddingBottom","fullContentHeight","minContentHeight","min","offsetHeight","viewportStyles","viewportPaddingTop","viewportPaddingBottom","topEdgeToTriggerMiddle","top","height","triggerMiddleToBottomEdge","selectedItemHalfHeight","itemOffsetMiddle","offsetTop","contentTopToItemMiddle","itemMiddleToContentBottom","willAlignWithoutTopOverflow","isLastItem","bottom","viewportOffsetBottom","clientHeight","clampedTriggerMiddleToBottomEdge","isFirstItem","clampedTopEdgeToTriggerMiddle","margin","minHeight","maxHeight","requestAnimationFrame","contentZIndex","setContentZIndex","zIndex","handleScrollButtonChange","SelectViewportProvider","onScrollButtonChange","div","boxSizing","POPPER_POSITION_NAME","Content","useSelectViewportContext","VIEWPORT_NAME","SelectViewport","nonce","viewportProps","viewportContext","prevScrollTopRef","dangerouslySetInnerHTML","__html","flex","overflow","onScroll","scrolledBy","cssMinHeight","parseFloat","cssHeight","prevHeight","nextHeight","clampedNextHeight","heightDiff","justifyContent","GROUP_NAME","SelectGroupContextProvider","useSelectGroupContext","SelectGroup","groupProps","groupId","LABEL_NAME","SelectLabel","labelProps","groupContext","ITEM_NAME","SelectItemContextProvider","useSelectItemContext","SelectItem","textValue","textValueProp","itemProps","isSelected","setTextValue","isFocused","setIsFocused","textId","handleSelect","Error","onItemTextChange","prevTextValue","textContent","trim","ItemSlot","onFocus","onBlur","onPointerUp","onPointerMove","onPointerLeave","ITEM_TEXT_NAME","SelectItemText","itemTextProps","itemContext","nativeOptionsContext","itemTextNode","setItemTextNode","nativeOption","useMemo","ITEM_INDICATOR_NAME","SelectItemIndicator","itemIndicatorProps","SCROLL_UP_BUTTON_NAME","SelectScrollUpButton","canScrollUp","setCanScrollUp","handleScroll2","handleScroll","canScrollUp2","SelectScrollButtonImpl","onAutoScroll","SCROLL_DOWN_BUTTON_NAME","SelectScrollDownButton","canScrollDown","setCanScrollDown","maxScroll","canScrollDown2","ceil","scrollIndicatorProps","autoScrollTimerRef","clearAutoScrollTimer","clearInterval","activeItem","flexShrink","setInterval","SEPARATOR_NAME","SelectSeparator","separatorProps","ARROW_NAME","SelectArrow","arrowProps","Arrow","BUBBLE_INPUT_NAME","prevValue","select","selectProto","HTMLSelectElement","prototype","descriptor","Object","getOwnPropertyDescriptor","set","Event","bubbles","call","dispatchEvent","onSearchChange","handleSearchChange","timerRef","updateSearch","clearTimeout","isRepeated","every","char","normalizedSearch","currentItemIndex","wrappedItems","wrapArray","excludeCurrentItem","v","toLowerCase","startsWith","array","startIndex","_","index","Root2","Trigger","Value","Icon","Content2","Viewport","Group","Label","Item","ItemText","ItemIndicator","ScrollUpButton","ScrollDownButton","Separator","Arrow2"],"sources":["D:\\important\\cursor\\netrik website\\Netrik-techworks-website\\frontend\\node_modules\\@radix-ui\\react-select\\src\\select.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { useId } from '@radix-ui/react-id';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { createSlot } from '@radix-ui/react-slot';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { VISUALLY_HIDDEN_STYLES } from '@radix-ui/react-visually-hidden';\nimport { hideOthers } from 'aria-hidden';\nimport { RemoveScroll } from 'react-remove-scroll';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\nconst OPEN_KEYS = [' ', 'Enter', 'ArrowUp', 'ArrowDown'];\nconst SELECTION_KEYS = [' ', 'Enter'];\n\n/* -------------------------------------------------------------------------------------------------\n * Select\n * -----------------------------------------------------------------------------------------------*/\n\nconst SELECT_NAME = 'Select';\n\ntype ItemData = { value: string; disabled: boolean; textValue: string };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  SelectItemElement,\n  ItemData\n>(SELECT_NAME);\n\ntype ScopedProps<P> = P & { __scopeSelect?: Scope };\nconst [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME, [\n  createCollectionScope,\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\ntype SelectContextValue = {\n  trigger: SelectTriggerElement | null;\n  onTriggerChange(node: SelectTriggerElement | null): void;\n  valueNode: SelectValueElement | null;\n  onValueNodeChange(node: SelectValueElement): void;\n  valueNodeHasChildren: boolean;\n  onValueNodeHasChildrenChange(hasChildren: boolean): void;\n  contentId: string;\n  value: string | undefined;\n  onValueChange(value: string): void;\n  open: boolean;\n  required?: boolean;\n  onOpenChange(open: boolean): void;\n  dir: SelectProps['dir'];\n  triggerPointerDownPosRef: React.MutableRefObject<{ x: number; y: number } | null>;\n  disabled?: boolean;\n};\n\nconst [SelectProvider, useSelectContext] = createSelectContext<SelectContextValue>(SELECT_NAME);\n\ntype NativeOption = React.ReactElement<React.ComponentProps<'option'>>;\n\ntype SelectNativeOptionsContextValue = {\n  onNativeOptionAdd(option: NativeOption): void;\n  onNativeOptionRemove(option: NativeOption): void;\n};\nconst [SelectNativeOptionsProvider, useSelectNativeOptionsContext] =\n  createSelectContext<SelectNativeOptionsContextValue>(SELECT_NAME);\n\ninterface ControlledClearableSelectProps {\n  value: string | undefined;\n  defaultValue?: never;\n  onValueChange: (value: string | undefined) => void;\n}\n\ninterface ControlledUnclearableSelectProps {\n  value: string;\n  defaultValue?: never;\n  onValueChange: (value: string) => void;\n}\n\ninterface UncontrolledSelectProps {\n  value?: never;\n  defaultValue?: string;\n  onValueChange?: {\n    (value: string): void;\n    (value: string | undefined): void;\n  };\n}\n\ntype SelectControlProps =\n  | ControlledClearableSelectProps\n  | ControlledUnclearableSelectProps\n  | UncontrolledSelectProps;\n\ninterface SelectSharedProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  dir?: Direction;\n  name?: string;\n  autoComplete?: string;\n  disabled?: boolean;\n  required?: boolean;\n  form?: string;\n}\n\n// TODO: Should improve typing somewhat, but this would be a breaking change.\n// Consider using in the next major version (along with some testing to be sure\n// it works as expected and doesn't cause problems)\ntype _FutureSelectProps = SelectSharedProps & SelectControlProps;\n\ntype SelectProps = SelectSharedProps & {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?(value: string): void;\n};\n\nconst Select: React.FC<SelectProps> = (props: ScopedProps<SelectProps>) => {\n  const {\n    __scopeSelect,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    value: valueProp,\n    defaultValue,\n    onValueChange,\n    dir,\n    name,\n    autoComplete,\n    disabled,\n    required,\n    form,\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  const [trigger, setTrigger] = React.useState<SelectTriggerElement | null>(null);\n  const [valueNode, setValueNode] = React.useState<SelectValueElement | null>(null);\n  const [valueNodeHasChildren, setValueNodeHasChildren] = React.useState(false);\n  const direction = useDirection(dir);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n    caller: SELECT_NAME,\n  });\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange as any,\n    caller: SELECT_NAME,\n  });\n  const triggerPointerDownPosRef = React.useRef<{ x: number; y: number } | null>(null);\n\n  // We set this to true by default so that events bubble to forms without JS (SSR)\n  const isFormControl = trigger ? form || !!trigger.closest('form') : true;\n  const [nativeOptionsSet, setNativeOptionsSet] = React.useState(new Set<NativeOption>());\n\n  // The native `select` only associates the correct default value if the corresponding\n  // `option` is rendered as a child **at the same time** as itself.\n  // Because it might take a few renders for our items to gather the information to build\n  // the native `option`(s), we generate a key on the `select` to make sure React re-builds it\n  // each time the options change.\n  const nativeSelectKey = Array.from(nativeOptionsSet)\n    .map((option) => option.props.value)\n    .join(';');\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <SelectProvider\n        required={required}\n        scope={__scopeSelect}\n        trigger={trigger}\n        onTriggerChange={setTrigger}\n        valueNode={valueNode}\n        onValueNodeChange={setValueNode}\n        valueNodeHasChildren={valueNodeHasChildren}\n        onValueNodeHasChildrenChange={setValueNodeHasChildren}\n        contentId={useId()}\n        value={value}\n        onValueChange={setValue}\n        open={open}\n        onOpenChange={setOpen}\n        dir={direction}\n        triggerPointerDownPosRef={triggerPointerDownPosRef}\n        disabled={disabled}\n      >\n        <Collection.Provider scope={__scopeSelect}>\n          <SelectNativeOptionsProvider\n            scope={props.__scopeSelect}\n            onNativeOptionAdd={React.useCallback((option) => {\n              setNativeOptionsSet((prev) => new Set(prev).add(option));\n            }, [])}\n            onNativeOptionRemove={React.useCallback((option) => {\n              setNativeOptionsSet((prev) => {\n                const optionsSet = new Set(prev);\n                optionsSet.delete(option);\n                return optionsSet;\n              });\n            }, [])}\n          >\n            {children}\n          </SelectNativeOptionsProvider>\n        </Collection.Provider>\n\n        {isFormControl ? (\n          <SelectBubbleInput\n            key={nativeSelectKey}\n            aria-hidden\n            required={required}\n            tabIndex={-1}\n            name={name}\n            autoComplete={autoComplete}\n            value={value}\n            // enable form autofill\n            onChange={(event) => setValue(event.target.value)}\n            disabled={disabled}\n            form={form}\n          >\n            {value === undefined ? <option value=\"\" /> : null}\n            {Array.from(nativeOptionsSet)}\n          </SelectBubbleInput>\n        ) : null}\n      </SelectProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nSelect.displayName = SELECT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'SelectTrigger';\n\ntype SelectTriggerElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface SelectTriggerProps extends PrimitiveButtonProps {}\n\nconst SelectTrigger = React.forwardRef<SelectTriggerElement, SelectTriggerProps>(\n  (props: ScopedProps<SelectTriggerProps>, forwardedRef) => {\n    const { __scopeSelect, disabled = false, ...triggerProps } = props;\n    const popperScope = usePopperScope(__scopeSelect);\n    const context = useSelectContext(TRIGGER_NAME, __scopeSelect);\n    const isDisabled = context.disabled || disabled;\n    const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);\n    const getItems = useCollection(__scopeSelect);\n    const pointerTypeRef = React.useRef<React.PointerEvent['pointerType']>('touch');\n\n    const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.value === context.value);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem !== undefined) {\n        context.onValueChange(nextItem.value);\n      }\n    });\n\n    const handleOpen = (pointerEvent?: React.MouseEvent | React.PointerEvent) => {\n      if (!isDisabled) {\n        context.onOpenChange(true);\n        // reset typeahead when we open\n        resetTypeahead();\n      }\n\n      if (pointerEvent) {\n        context.triggerPointerDownPosRef.current = {\n          x: Math.round(pointerEvent.pageX),\n          y: Math.round(pointerEvent.pageY),\n        };\n      }\n    };\n\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.button\n          type=\"button\"\n          role=\"combobox\"\n          aria-controls={context.contentId}\n          aria-expanded={context.open}\n          aria-required={context.required}\n          aria-autocomplete=\"none\"\n          dir={context.dir}\n          data-state={context.open ? 'open' : 'closed'}\n          disabled={isDisabled}\n          data-disabled={isDisabled ? '' : undefined}\n          data-placeholder={shouldShowPlaceholder(context.value) ? '' : undefined}\n          {...triggerProps}\n          ref={composedRefs}\n          // Enable compatibility with native label or custom `Label` \"click\" for Safari:\n          onClick={composeEventHandlers(triggerProps.onClick, (event) => {\n            // Whilst browsers generally have no issue focusing the trigger when clicking\n            // on a label, Safari seems to struggle with the fact that there's no `onClick`.\n            // We force `focus` in this case. Note: this doesn't create any other side-effect\n            // because we are preventing default in `onPointerDown` so effectively\n            // this only runs for a label \"click\"\n            event.currentTarget.focus();\n\n            // Open on click when using a touch or pen device\n            if (pointerTypeRef.current !== 'mouse') {\n              handleOpen(event);\n            }\n          })}\n          onPointerDown={composeEventHandlers(triggerProps.onPointerDown, (event) => {\n            pointerTypeRef.current = event.pointerType;\n\n            // prevent implicit pointer capture\n            // https://www.w3.org/TR/pointerevents3/#implicit-pointer-capture\n            const target = event.target as HTMLElement;\n            if (target.hasPointerCapture(event.pointerId)) {\n              target.releasePointerCapture(event.pointerId);\n            }\n\n            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n            // but not when the control key is pressed (avoiding MacOS right click); also not for touch\n            // devices because that would open the menu on scroll. (pen devices behave as touch on iOS).\n            if (event.button === 0 && event.ctrlKey === false && event.pointerType === 'mouse') {\n              handleOpen(event);\n              // prevent trigger from stealing focus from the active item after opening.\n              event.preventDefault();\n            }\n          })}\n          onKeyDown={composeEventHandlers(triggerProps.onKeyDown, (event) => {\n            const isTypingAhead = searchRef.current !== '';\n            const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n            if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n            if (isTypingAhead && event.key === ' ') return;\n            if (OPEN_KEYS.includes(event.key)) {\n              handleOpen();\n              event.preventDefault();\n            }\n          })}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nSelectTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectValue\n * -----------------------------------------------------------------------------------------------*/\n\nconst VALUE_NAME = 'SelectValue';\n\ntype SelectValueElement = React.ComponentRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface SelectValueProps extends Omit<PrimitiveSpanProps, 'placeholder'> {\n  placeholder?: React.ReactNode;\n}\n\nconst SelectValue = React.forwardRef<SelectValueElement, SelectValueProps>(\n  (props: ScopedProps<SelectValueProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, children, placeholder = '', ...valueProps } = props;\n    const context = useSelectContext(VALUE_NAME, __scopeSelect);\n    const { onValueNodeHasChildrenChange } = context;\n    const hasChildren = children !== undefined;\n    const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);\n\n    useLayoutEffect(() => {\n      onValueNodeHasChildrenChange(hasChildren);\n    }, [onValueNodeHasChildrenChange, hasChildren]);\n\n    return (\n      <Primitive.span\n        {...valueProps}\n        ref={composedRefs}\n        // we don't want events from the portalled `SelectValue` children to bubble\n        // through the item they came from\n        style={{ pointerEvents: 'none' }}\n      >\n        {shouldShowPlaceholder(context.value) ? <>{placeholder}</> : children}\n      </Primitive.span>\n    );\n  }\n);\n\nSelectValue.displayName = VALUE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectIcon\n * -----------------------------------------------------------------------------------------------*/\n\nconst ICON_NAME = 'SelectIcon';\n\ntype SelectIconElement = React.ComponentRef<typeof Primitive.span>;\ninterface SelectIconProps extends PrimitiveSpanProps {}\n\nconst SelectIcon = React.forwardRef<SelectIconElement, SelectIconProps>(\n  (props: ScopedProps<SelectIconProps>, forwardedRef) => {\n    const { __scopeSelect, children, ...iconProps } = props;\n    return (\n      <Primitive.span aria-hidden {...iconProps} ref={forwardedRef}>\n        {children || '▼'}\n      </Primitive.span>\n    );\n  }\n);\n\nSelectIcon.displayName = ICON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'SelectPortal';\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface SelectPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n}\n\nconst SelectPortal: React.FC<SelectPortalProps> = (props: ScopedProps<SelectPortalProps>) => {\n  return <PortalPrimitive asChild {...props} />;\n};\n\nSelectPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'SelectContent';\n\ntype SelectContentElement = SelectContentImplElement;\ninterface SelectContentProps extends SelectContentImplProps {}\n\nconst SelectContent = React.forwardRef<SelectContentElement, SelectContentProps>(\n  (props: ScopedProps<SelectContentProps>, forwardedRef) => {\n    const context = useSelectContext(CONTENT_NAME, props.__scopeSelect);\n    const [fragment, setFragment] = React.useState<DocumentFragment>();\n\n    // setting the fragment in `useLayoutEffect` as `DocumentFragment` doesn't exist on the server\n    useLayoutEffect(() => {\n      setFragment(new DocumentFragment());\n    }, []);\n\n    if (!context.open) {\n      const frag = fragment as Element | undefined;\n      return frag\n        ? ReactDOM.createPortal(\n            <SelectContentProvider scope={props.__scopeSelect}>\n              <Collection.Slot scope={props.__scopeSelect}>\n                <div>{props.children}</div>\n              </Collection.Slot>\n            </SelectContentProvider>,\n            frag\n          )\n        : null;\n    }\n\n    return <SelectContentImpl {...props} ref={forwardedRef} />;\n  }\n);\n\nSelectContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectContentImpl\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_MARGIN = 10;\n\ntype SelectContentContextValue = {\n  content?: SelectContentElement | null;\n  viewport?: SelectViewportElement | null;\n  onViewportChange?: (node: SelectViewportElement | null) => void;\n  itemRefCallback?: (node: SelectItemElement | null, value: string, disabled: boolean) => void;\n  selectedItem?: SelectItemElement | null;\n  onItemLeave?: () => void;\n  itemTextRefCallback?: (\n    node: SelectItemTextElement | null,\n    value: string,\n    disabled: boolean\n  ) => void;\n  focusSelectedItem?: () => void;\n  selectedItemText?: SelectItemTextElement | null;\n  position?: SelectContentProps['position'];\n  isPositioned?: boolean;\n  searchRef?: React.RefObject<string>;\n};\n\nconst [SelectContentProvider, useSelectContentContext] =\n  createSelectContext<SelectContentContextValue>(CONTENT_NAME);\n\nconst CONTENT_IMPL_NAME = 'SelectContentImpl';\n\ntype SelectContentImplElement = SelectPopperPositionElement | SelectItemAlignedPositionElement;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = React.ComponentPropsWithoutRef<typeof FocusScope>;\n\ntype SelectPopperPrivateProps = { onPlaced?: PopperContentProps['onPlaced'] };\n\ninterface SelectContentImplProps\n  extends Omit<SelectPopperPositionProps, keyof SelectPopperPrivateProps>,\n    Omit<SelectItemAlignedPositionProps, keyof SelectPopperPrivateProps> {\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n\n  position?: 'item-aligned' | 'popper';\n}\n\nconst Slot = createSlot('SelectContent.RemoveScroll');\n\nconst SelectContentImpl = React.forwardRef<SelectContentImplElement, SelectContentImplProps>(\n  (props: ScopedProps<SelectContentImplProps>, forwardedRef) => {\n    const {\n      __scopeSelect,\n      position = 'item-aligned',\n      onCloseAutoFocus,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      //\n      // PopperContent props\n      side,\n      sideOffset,\n      align,\n      alignOffset,\n      arrowPadding,\n      collisionBoundary,\n      collisionPadding,\n      sticky,\n      hideWhenDetached,\n      avoidCollisions,\n      //\n      ...contentProps\n    } = props;\n    const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n    const [content, setContent] = React.useState<SelectContentImplElement | null>(null);\n    const [viewport, setViewport] = React.useState<SelectViewportElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n    const [selectedItem, setSelectedItem] = React.useState<SelectItemElement | null>(null);\n    const [selectedItemText, setSelectedItemText] = React.useState<SelectItemTextElement | null>(\n      null\n    );\n    const getItems = useCollection(__scopeSelect);\n    const [isPositioned, setIsPositioned] = React.useState(false);\n    const firstValidItemFoundRef = React.useRef(false);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      if (content) return hideOthers(content);\n    }, [content]);\n\n    // Make sure the whole tree has focus guards as our `Select` may be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    const focusFirst = React.useCallback(\n      (candidates: Array<HTMLElement | null>) => {\n        const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);\n        const [lastItem] = restItems.slice(-1);\n\n        const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n        for (const candidate of candidates) {\n          // if focus is already where we want to go, we don't want to keep going through the candidates\n          if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n          candidate?.scrollIntoView({ block: 'nearest' });\n          // viewport might have padding so scroll to its edges when focusing first/last items.\n          if (candidate === firstItem && viewport) viewport.scrollTop = 0;\n          if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;\n          candidate?.focus();\n          if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n        }\n      },\n      [getItems, viewport]\n    );\n\n    const focusSelectedItem = React.useCallback(\n      () => focusFirst([selectedItem, content]),\n      [focusFirst, selectedItem, content]\n    );\n\n    // Since this is not dependent on layout, we want to ensure this runs at the same time as\n    // other effects across components. Hence why we don't call `focusSelectedItem` inside `position`.\n    React.useEffect(() => {\n      if (isPositioned) {\n        focusSelectedItem();\n      }\n    }, [isPositioned, focusSelectedItem]);\n\n    // prevent selecting items on `pointerup` in some cases after opening from `pointerdown`\n    // and close on `pointerup` outside.\n    const { onOpenChange, triggerPointerDownPosRef } = context;\n    React.useEffect(() => {\n      if (content) {\n        let pointerMoveDelta = { x: 0, y: 0 };\n\n        const handlePointerMove = (event: PointerEvent) => {\n          pointerMoveDelta = {\n            x: Math.abs(Math.round(event.pageX) - (triggerPointerDownPosRef.current?.x ?? 0)),\n            y: Math.abs(Math.round(event.pageY) - (triggerPointerDownPosRef.current?.y ?? 0)),\n          };\n        };\n        const handlePointerUp = (event: PointerEvent) => {\n          // If the pointer hasn't moved by a certain threshold then we prevent selecting item on `pointerup`.\n          if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {\n            event.preventDefault();\n          } else {\n            // otherwise, if the event was outside the content, close.\n            if (!content.contains(event.target as HTMLElement)) {\n              onOpenChange(false);\n            }\n          }\n          document.removeEventListener('pointermove', handlePointerMove);\n          triggerPointerDownPosRef.current = null;\n        };\n\n        if (triggerPointerDownPosRef.current !== null) {\n          document.addEventListener('pointermove', handlePointerMove);\n          document.addEventListener('pointerup', handlePointerUp, { capture: true, once: true });\n        }\n\n        return () => {\n          document.removeEventListener('pointermove', handlePointerMove);\n          document.removeEventListener('pointerup', handlePointerUp, { capture: true });\n        };\n      }\n    }, [content, onOpenChange, triggerPointerDownPosRef]);\n\n    React.useEffect(() => {\n      const close = () => onOpenChange(false);\n      window.addEventListener('blur', close);\n      window.addEventListener('resize', close);\n      return () => {\n        window.removeEventListener('blur', close);\n        window.removeEventListener('resize', close);\n      };\n    }, [onOpenChange]);\n\n    const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem) {\n        /**\n         * Imperative focus during keydown is risky so we prevent React's batching updates\n         * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n         */\n        setTimeout(() => (nextItem.ref.current as HTMLElement).focus());\n      }\n    });\n\n    const itemRefCallback = React.useCallback(\n      (node: SelectItemElement | null, value: string, disabled: boolean) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== undefined && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItem(node);\n          if (isFirstValidItem) firstValidItemFoundRef.current = true;\n        }\n      },\n      [context.value]\n    );\n    const handleItemLeave = React.useCallback(() => content?.focus(), [content]);\n    const itemTextRefCallback = React.useCallback(\n      (node: SelectItemTextElement | null, value: string, disabled: boolean) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== undefined && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItemText(node);\n        }\n      },\n      [context.value]\n    );\n\n    const SelectPosition = position === 'popper' ? SelectPopperPosition : SelectItemAlignedPosition;\n\n    // Silently ignore props that are not supported by `SelectItemAlignedPosition`\n    const popperContentProps =\n      SelectPosition === SelectPopperPosition\n        ? {\n            side,\n            sideOffset,\n            align,\n            alignOffset,\n            arrowPadding,\n            collisionBoundary,\n            collisionPadding,\n            sticky,\n            hideWhenDetached,\n            avoidCollisions,\n          }\n        : {};\n\n    return (\n      <SelectContentProvider\n        scope={__scopeSelect}\n        content={content}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        itemRefCallback={itemRefCallback}\n        selectedItem={selectedItem}\n        onItemLeave={handleItemLeave}\n        itemTextRefCallback={itemTextRefCallback}\n        focusSelectedItem={focusSelectedItem}\n        selectedItemText={selectedItemText}\n        position={position}\n        isPositioned={isPositioned}\n        searchRef={searchRef}\n      >\n        <RemoveScroll as={Slot} allowPinchZoom>\n          <FocusScope\n            asChild\n            // we make sure we're not trapping once it's been closed\n            // (closed !== unmounted when animating out)\n            trapped={context.open}\n            onMountAutoFocus={(event) => {\n              // we prevent open autofocus because we manually focus the selected item\n              event.preventDefault();\n            }}\n            onUnmountAutoFocus={composeEventHandlers(onCloseAutoFocus, (event) => {\n              context.trigger?.focus({ preventScroll: true });\n              event.preventDefault();\n            })}\n          >\n            <DismissableLayer\n              asChild\n              disableOutsidePointerEvents\n              onEscapeKeyDown={onEscapeKeyDown}\n              onPointerDownOutside={onPointerDownOutside}\n              // When focus is trapped, a focusout event may still happen.\n              // We make sure we don't trigger our `onDismiss` in such case.\n              onFocusOutside={(event) => event.preventDefault()}\n              onDismiss={() => context.onOpenChange(false)}\n            >\n              <SelectPosition\n                role=\"listbox\"\n                id={context.contentId}\n                data-state={context.open ? 'open' : 'closed'}\n                dir={context.dir}\n                onContextMenu={(event) => event.preventDefault()}\n                {...contentProps}\n                {...popperContentProps}\n                onPlaced={() => setIsPositioned(true)}\n                ref={composedRefs}\n                style={{\n                  // flex layout so we can place the scroll buttons properly\n                  display: 'flex',\n                  flexDirection: 'column',\n                  // reset the outline by default as the content MAY get focused\n                  outline: 'none',\n                  ...contentProps.style,\n                }}\n                onKeyDown={composeEventHandlers(contentProps.onKeyDown, (event) => {\n                  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n\n                  // select should not be navigated using tab key so we prevent it\n                  if (event.key === 'Tab') event.preventDefault();\n\n                  if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n\n                  if (['ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {\n                    const items = getItems().filter((item) => !item.disabled);\n                    let candidateNodes = items.map((item) => item.ref.current!);\n\n                    if (['ArrowUp', 'End'].includes(event.key)) {\n                      candidateNodes = candidateNodes.slice().reverse();\n                    }\n                    if (['ArrowUp', 'ArrowDown'].includes(event.key)) {\n                      const currentElement = event.target as SelectItemElement;\n                      const currentIndex = candidateNodes.indexOf(currentElement);\n                      candidateNodes = candidateNodes.slice(currentIndex + 1);\n                    }\n\n                    /**\n                     * Imperative focus during keydown is risky so we prevent React's batching updates\n                     * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n                     */\n                    setTimeout(() => focusFirst(candidateNodes));\n\n                    event.preventDefault();\n                  }\n                })}\n              />\n            </DismissableLayer>\n          </FocusScope>\n        </RemoveScroll>\n      </SelectContentProvider>\n    );\n  }\n);\n\nSelectContentImpl.displayName = CONTENT_IMPL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemAlignedPosition\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_ALIGNED_POSITION_NAME = 'SelectItemAlignedPosition';\n\ntype SelectItemAlignedPositionElement = React.ComponentRef<typeof Primitive.div>;\ninterface SelectItemAlignedPositionProps extends PrimitiveDivProps, SelectPopperPrivateProps {}\n\nconst SelectItemAlignedPosition = React.forwardRef<\n  SelectItemAlignedPositionElement,\n  SelectItemAlignedPositionProps\n>((props: ScopedProps<SelectItemAlignedPositionProps>, forwardedRef) => {\n  const { __scopeSelect, onPlaced, ...popperProps } = props;\n  const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(CONTENT_NAME, __scopeSelect);\n  const [contentWrapper, setContentWrapper] = React.useState<HTMLDivElement | null>(null);\n  const [content, setContent] = React.useState<SelectItemAlignedPositionElement | null>(null);\n  const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n  const getItems = useCollection(__scopeSelect);\n  const shouldExpandOnScrollRef = React.useRef(false);\n  const shouldRepositionRef = React.useRef(true);\n\n  const { viewport, selectedItem, selectedItemText, focusSelectedItem } = contentContext;\n  const position = React.useCallback(() => {\n    if (\n      context.trigger &&\n      context.valueNode &&\n      contentWrapper &&\n      content &&\n      viewport &&\n      selectedItem &&\n      selectedItemText\n    ) {\n      const triggerRect = context.trigger.getBoundingClientRect();\n\n      // -----------------------------------------------------------------------------------------\n      //  Horizontal positioning\n      // -----------------------------------------------------------------------------------------\n      const contentRect = content.getBoundingClientRect();\n      const valueNodeRect = context.valueNode.getBoundingClientRect();\n      const itemTextRect = selectedItemText.getBoundingClientRect();\n\n      if (context.dir !== 'rtl') {\n        const itemTextOffset = itemTextRect.left - contentRect.left;\n        const left = valueNodeRect.left - itemTextOffset;\n        const leftDelta = triggerRect.left - left;\n        const minContentWidth = triggerRect.width + leftDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const rightEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedLeft = clamp(left, [\n          CONTENT_MARGIN,\n          // Prevents the content from going off the starting edge of the\n          // viewport. It may still go off the ending edge, but this can be\n          // controlled by the user since they may want to manage overflow in a\n          // specific way.\n          // https://github.com/radix-ui/primitives/issues/2049\n          Math.max(CONTENT_MARGIN, rightEdge - contentWidth),\n        ]);\n\n        contentWrapper.style.minWidth = minContentWidth + 'px';\n        contentWrapper.style.left = clampedLeft + 'px';\n      } else {\n        const itemTextOffset = contentRect.right - itemTextRect.right;\n        const right = window.innerWidth - valueNodeRect.right - itemTextOffset;\n        const rightDelta = window.innerWidth - triggerRect.right - right;\n        const minContentWidth = triggerRect.width + rightDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const leftEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedRight = clamp(right, [\n          CONTENT_MARGIN,\n          Math.max(CONTENT_MARGIN, leftEdge - contentWidth),\n        ]);\n\n        contentWrapper.style.minWidth = minContentWidth + 'px';\n        contentWrapper.style.right = clampedRight + 'px';\n      }\n\n      // -----------------------------------------------------------------------------------------\n      // Vertical positioning\n      // -----------------------------------------------------------------------------------------\n      const items = getItems();\n      const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n      const itemsHeight = viewport.scrollHeight;\n\n      const contentStyles = window.getComputedStyle(content);\n      const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);\n      const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n      const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);\n      const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);\n      const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth; // prettier-ignore\n      const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);\n\n      const viewportStyles = window.getComputedStyle(viewport);\n      const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);\n      const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);\n\n      const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;\n      const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;\n\n      const selectedItemHalfHeight = selectedItem.offsetHeight / 2;\n      const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;\n      const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;\n      const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;\n\n      const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;\n\n      if (willAlignWithoutTopOverflow) {\n        const isLastItem =\n          items.length > 0 && selectedItem === items[items.length - 1]!.ref.current;\n        contentWrapper.style.bottom = 0 + 'px';\n        const viewportOffsetBottom =\n          content.clientHeight - viewport.offsetTop - viewport.offsetHeight;\n        const clampedTriggerMiddleToBottomEdge = Math.max(\n          triggerMiddleToBottomEdge,\n          selectedItemHalfHeight +\n            // viewport might have padding bottom, include it to avoid a scrollable viewport\n            (isLastItem ? viewportPaddingBottom : 0) +\n            viewportOffsetBottom +\n            contentBorderBottomWidth\n        );\n        const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;\n        contentWrapper.style.height = height + 'px';\n      } else {\n        const isFirstItem = items.length > 0 && selectedItem === items[0]!.ref.current;\n        contentWrapper.style.top = 0 + 'px';\n        const clampedTopEdgeToTriggerMiddle = Math.max(\n          topEdgeToTriggerMiddle,\n          contentBorderTopWidth +\n            viewport.offsetTop +\n            // viewport might have padding top, include it to avoid a scrollable viewport\n            (isFirstItem ? viewportPaddingTop : 0) +\n            selectedItemHalfHeight\n        );\n        const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;\n        contentWrapper.style.height = height + 'px';\n        viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;\n      }\n\n      contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;\n      contentWrapper.style.minHeight = minContentHeight + 'px';\n      contentWrapper.style.maxHeight = availableHeight + 'px';\n      // -----------------------------------------------------------------------------------------\n\n      onPlaced?.();\n\n      // we don't want the initial scroll position adjustment to trigger \"expand on scroll\"\n      // so we explicitly turn it on only after they've registered.\n      requestAnimationFrame(() => (shouldExpandOnScrollRef.current = true));\n    }\n  }, [\n    getItems,\n    context.trigger,\n    context.valueNode,\n    contentWrapper,\n    content,\n    viewport,\n    selectedItem,\n    selectedItemText,\n    context.dir,\n    onPlaced,\n  ]);\n\n  useLayoutEffect(() => position(), [position]);\n\n  // copy z-index from content to wrapper\n  const [contentZIndex, setContentZIndex] = React.useState<string>();\n  useLayoutEffect(() => {\n    if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n  }, [content]);\n\n  // When the viewport becomes scrollable at the top, the scroll up button will mount.\n  // Because it is part of the normal flow, it will push down the viewport, thus throwing our\n  // trigger => selectedItem alignment off by the amount the viewport was pushed down.\n  // We wait for this to happen and then re-run the positining logic one more time to account for it.\n  const handleScrollButtonChange = React.useCallback(\n    (node: SelectScrollButtonImplElement | null) => {\n      if (node && shouldRepositionRef.current === true) {\n        position();\n        focusSelectedItem?.();\n        shouldRepositionRef.current = false;\n      }\n    },\n    [position, focusSelectedItem]\n  );\n\n  return (\n    <SelectViewportProvider\n      scope={__scopeSelect}\n      contentWrapper={contentWrapper}\n      shouldExpandOnScrollRef={shouldExpandOnScrollRef}\n      onScrollButtonChange={handleScrollButtonChange}\n    >\n      <div\n        ref={setContentWrapper}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          position: 'fixed',\n          zIndex: contentZIndex,\n        }}\n      >\n        <Primitive.div\n          {...popperProps}\n          ref={composedRefs}\n          style={{\n            // When we get the height of the content, it includes borders. If we were to set\n            // the height without having `boxSizing: 'border-box'` it would be too big.\n            boxSizing: 'border-box',\n            // We need to ensure the content doesn't get taller than the wrapper\n            maxHeight: '100%',\n            ...popperProps.style,\n          }}\n        />\n      </div>\n    </SelectViewportProvider>\n  );\n});\n\nSelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectPopperPosition\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPPER_POSITION_NAME = 'SelectPopperPosition';\n\ntype SelectPopperPositionElement = React.ComponentRef<typeof PopperPrimitive.Content>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface SelectPopperPositionProps extends PopperContentProps, SelectPopperPrivateProps {}\n\nconst SelectPopperPosition = React.forwardRef<\n  SelectPopperPositionElement,\n  SelectPopperPositionProps\n>((props: ScopedProps<SelectPopperPositionProps>, forwardedRef) => {\n  const {\n    __scopeSelect,\n    align = 'start',\n    collisionPadding = CONTENT_MARGIN,\n    ...popperProps\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n\n  return (\n    <PopperPrimitive.Content\n      {...popperScope}\n      {...popperProps}\n      ref={forwardedRef}\n      align={align}\n      collisionPadding={collisionPadding}\n      style={{\n        // Ensure border-box for floating-ui calculations\n        boxSizing: 'border-box',\n        ...popperProps.style,\n        // re-namespace exposed content custom properties\n        ...{\n          '--radix-select-content-transform-origin': 'var(--radix-popper-transform-origin)',\n          '--radix-select-content-available-width': 'var(--radix-popper-available-width)',\n          '--radix-select-content-available-height': 'var(--radix-popper-available-height)',\n          '--radix-select-trigger-width': 'var(--radix-popper-anchor-width)',\n          '--radix-select-trigger-height': 'var(--radix-popper-anchor-height)',\n        },\n      }}\n    />\n  );\n});\n\nSelectPopperPosition.displayName = POPPER_POSITION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectViewport\n * -----------------------------------------------------------------------------------------------*/\n\ntype SelectViewportContextValue = {\n  contentWrapper?: HTMLDivElement | null;\n  shouldExpandOnScrollRef?: React.RefObject<boolean>;\n  onScrollButtonChange?: (node: SelectScrollButtonImplElement | null) => void;\n};\n\nconst [SelectViewportProvider, useSelectViewportContext] =\n  createSelectContext<SelectViewportContextValue>(CONTENT_NAME, {});\n\nconst VIEWPORT_NAME = 'SelectViewport';\n\ntype SelectViewportElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface SelectViewportProps extends PrimitiveDivProps {\n  nonce?: string;\n}\n\nconst SelectViewport = React.forwardRef<SelectViewportElement, SelectViewportProps>(\n  (props: ScopedProps<SelectViewportProps>, forwardedRef) => {\n    const { __scopeSelect, nonce, ...viewportProps } = props;\n    const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);\n    const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);\n    const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);\n    const prevScrollTopRef = React.useRef(0);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n          nonce={nonce}\n        />\n        <Collection.Slot scope={__scopeSelect}>\n          <Primitive.div\n            data-radix-select-viewport=\"\"\n            role=\"presentation\"\n            {...viewportProps}\n            ref={composedRefs}\n            style={{\n              // we use position: 'relative' here on the `viewport` so that when we call\n              // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport\n              // (independent of the scrollUpButton).\n              position: 'relative',\n              flex: 1,\n              // Viewport should only be scrollable in the vertical direction.\n              // This won't work in vertical writing modes, so we'll need to\n              // revisit this if/when that is supported\n              // https://developer.chrome.com/blog/vertical-form-controls\n              overflow: 'hidden auto',\n              ...viewportProps.style,\n            }}\n            onScroll={composeEventHandlers(viewportProps.onScroll, (event) => {\n              const viewport = event.currentTarget;\n              const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;\n              if (shouldExpandOnScrollRef?.current && contentWrapper) {\n                const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);\n                if (scrolledBy > 0) {\n                  const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n                  const cssMinHeight = parseFloat(contentWrapper.style.minHeight);\n                  const cssHeight = parseFloat(contentWrapper.style.height);\n                  const prevHeight = Math.max(cssMinHeight, cssHeight);\n\n                  if (prevHeight < availableHeight) {\n                    const nextHeight = prevHeight + scrolledBy;\n                    const clampedNextHeight = Math.min(availableHeight, nextHeight);\n                    const heightDiff = nextHeight - clampedNextHeight;\n\n                    contentWrapper.style.height = clampedNextHeight + 'px';\n                    if (contentWrapper.style.bottom === '0px') {\n                      viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;\n                      // ensure the content stays pinned to the bottom\n                      contentWrapper.style.justifyContent = 'flex-end';\n                    }\n                  }\n                }\n              }\n              prevScrollTopRef.current = viewport.scrollTop;\n            })}\n          />\n        </Collection.Slot>\n      </>\n    );\n  }\n);\n\nSelectViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'SelectGroup';\n\ntype SelectGroupContextValue = { id: string };\n\nconst [SelectGroupContextProvider, useSelectGroupContext] =\n  createSelectContext<SelectGroupContextValue>(GROUP_NAME);\n\ntype SelectGroupElement = React.ComponentRef<typeof Primitive.div>;\ninterface SelectGroupProps extends PrimitiveDivProps {}\n\nconst SelectGroup = React.forwardRef<SelectGroupElement, SelectGroupProps>(\n  (props: ScopedProps<SelectGroupProps>, forwardedRef) => {\n    const { __scopeSelect, ...groupProps } = props;\n    const groupId = useId();\n    return (\n      <SelectGroupContextProvider scope={__scopeSelect} id={groupId}>\n        <Primitive.div role=\"group\" aria-labelledby={groupId} {...groupProps} ref={forwardedRef} />\n      </SelectGroupContextProvider>\n    );\n  }\n);\n\nSelectGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'SelectLabel';\n\ntype SelectLabelElement = React.ComponentRef<typeof Primitive.div>;\ninterface SelectLabelProps extends PrimitiveDivProps {}\n\nconst SelectLabel = React.forwardRef<SelectLabelElement, SelectLabelProps>(\n  (props: ScopedProps<SelectLabelProps>, forwardedRef) => {\n    const { __scopeSelect, ...labelProps } = props;\n    const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);\n    return <Primitive.div id={groupContext.id} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nSelectLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'SelectItem';\n\ntype SelectItemContextValue = {\n  value: string;\n  disabled: boolean;\n  textId: string;\n  isSelected: boolean;\n  onItemTextChange(node: SelectItemTextElement | null): void;\n};\n\nconst [SelectItemContextProvider, useSelectItemContext] =\n  createSelectContext<SelectItemContextValue>(ITEM_NAME);\n\ntype SelectItemElement = React.ComponentRef<typeof Primitive.div>;\ninterface SelectItemProps extends PrimitiveDivProps {\n  value: string;\n  disabled?: boolean;\n  textValue?: string;\n}\n\nconst SelectItem = React.forwardRef<SelectItemElement, SelectItemProps>(\n  (props: ScopedProps<SelectItemProps>, forwardedRef) => {\n    const {\n      __scopeSelect,\n      value,\n      disabled = false,\n      textValue: textValueProp,\n      ...itemProps\n    } = props;\n    const context = useSelectContext(ITEM_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);\n    const isSelected = context.value === value;\n    const [textValue, setTextValue] = React.useState(textValueProp ?? '');\n    const [isFocused, setIsFocused] = React.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, (node) =>\n      contentContext.itemRefCallback?.(node, value, disabled)\n    );\n    const textId = useId();\n    const pointerTypeRef = React.useRef<React.PointerEvent['pointerType']>('touch');\n\n    const handleSelect = () => {\n      if (!disabled) {\n        context.onValueChange(value);\n        context.onOpenChange(false);\n      }\n    };\n\n    if (value === '') {\n      throw new Error(\n        'A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder.'\n      );\n    }\n\n    return (\n      <SelectItemContextProvider\n        scope={__scopeSelect}\n        value={value}\n        disabled={disabled}\n        textId={textId}\n        isSelected={isSelected}\n        onItemTextChange={React.useCallback((node) => {\n          setTextValue((prevTextValue) => prevTextValue || (node?.textContent ?? '').trim());\n        }, [])}\n      >\n        <Collection.ItemSlot\n          scope={__scopeSelect}\n          value={value}\n          disabled={disabled}\n          textValue={textValue}\n        >\n          <Primitive.div\n            role=\"option\"\n            aria-labelledby={textId}\n            data-highlighted={isFocused ? '' : undefined}\n            // `isFocused` caveat fixes stuttering in VoiceOver\n            aria-selected={isSelected && isFocused}\n            data-state={isSelected ? 'checked' : 'unchecked'}\n            aria-disabled={disabled || undefined}\n            data-disabled={disabled ? '' : undefined}\n            tabIndex={disabled ? undefined : -1}\n            {...itemProps}\n            ref={composedRefs}\n            onFocus={composeEventHandlers(itemProps.onFocus, () => setIsFocused(true))}\n            onBlur={composeEventHandlers(itemProps.onBlur, () => setIsFocused(false))}\n            onClick={composeEventHandlers(itemProps.onClick, () => {\n              // Open on click when using a touch or pen device\n              if (pointerTypeRef.current !== 'mouse') handleSelect();\n            })}\n            onPointerUp={composeEventHandlers(itemProps.onPointerUp, () => {\n              // Using a mouse you should be able to do pointer down, move through\n              // the list, and release the pointer over the item to select it.\n              if (pointerTypeRef.current === 'mouse') handleSelect();\n            })}\n            onPointerDown={composeEventHandlers(itemProps.onPointerDown, (event) => {\n              pointerTypeRef.current = event.pointerType;\n            })}\n            onPointerMove={composeEventHandlers(itemProps.onPointerMove, (event) => {\n              // Remember pointer type when sliding over to this item from another one\n              pointerTypeRef.current = event.pointerType;\n              if (disabled) {\n                contentContext.onItemLeave?.();\n              } else if (pointerTypeRef.current === 'mouse') {\n                // even though safari doesn't support this option, it's acceptable\n                // as it only means it might scroll a few pixels when using the pointer.\n                event.currentTarget.focus({ preventScroll: true });\n              }\n            })}\n            onPointerLeave={composeEventHandlers(itemProps.onPointerLeave, (event) => {\n              if (event.currentTarget === document.activeElement) {\n                contentContext.onItemLeave?.();\n              }\n            })}\n            onKeyDown={composeEventHandlers(itemProps.onKeyDown, (event) => {\n              const isTypingAhead = contentContext.searchRef?.current !== '';\n              if (isTypingAhead && event.key === ' ') return;\n              if (SELECTION_KEYS.includes(event.key)) handleSelect();\n              // prevent page scroll if using the space key to select an item\n              if (event.key === ' ') event.preventDefault();\n            })}\n          />\n        </Collection.ItemSlot>\n      </SelectItemContextProvider>\n    );\n  }\n);\n\nSelectItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemText\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_TEXT_NAME = 'SelectItemText';\n\ntype SelectItemTextElement = React.ComponentRef<typeof Primitive.span>;\ninterface SelectItemTextProps extends PrimitiveSpanProps {}\n\nconst SelectItemText = React.forwardRef<SelectItemTextElement, SelectItemTextProps>(\n  (props: ScopedProps<SelectItemTextProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, ...itemTextProps } = props;\n    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);\n    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);\n    const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);\n    const [itemTextNode, setItemTextNode] = React.useState<SelectItemTextElement | null>(null);\n    const composedRefs = useComposedRefs(\n      forwardedRef,\n      (node) => setItemTextNode(node),\n      itemContext.onItemTextChange,\n      (node) => contentContext.itemTextRefCallback?.(node, itemContext.value, itemContext.disabled)\n    );\n\n    const textContent = itemTextNode?.textContent;\n    const nativeOption = React.useMemo(\n      () => (\n        <option key={itemContext.value} value={itemContext.value} disabled={itemContext.disabled}>\n          {textContent}\n        </option>\n      ),\n      [itemContext.disabled, itemContext.value, textContent]\n    );\n\n    const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;\n    useLayoutEffect(() => {\n      onNativeOptionAdd(nativeOption);\n      return () => onNativeOptionRemove(nativeOption);\n    }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]);\n\n    return (\n      <>\n        <Primitive.span id={itemContext.textId} {...itemTextProps} ref={composedRefs} />\n\n        {/* Portal the select item text into the trigger value node */}\n        {itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren\n          ? ReactDOM.createPortal(itemTextProps.children, context.valueNode)\n          : null}\n      </>\n    );\n  }\n);\n\nSelectItemText.displayName = ITEM_TEXT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_INDICATOR_NAME = 'SelectItemIndicator';\n\ntype SelectItemIndicatorElement = React.ComponentRef<typeof Primitive.span>;\ninterface SelectItemIndicatorProps extends PrimitiveSpanProps {}\n\nconst SelectItemIndicator = React.forwardRef<SelectItemIndicatorElement, SelectItemIndicatorProps>(\n  (props: ScopedProps<SelectItemIndicatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...itemIndicatorProps } = props;\n    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);\n    return itemContext.isSelected ? (\n      <Primitive.span aria-hidden {...itemIndicatorProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nSelectItemIndicator.displayName = ITEM_INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollUpButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_UP_BUTTON_NAME = 'SelectScrollUpButton';\n\ntype SelectScrollUpButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollUpButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollUpButton = React.forwardRef<\n  SelectScrollUpButtonElement,\n  SelectScrollUpButtonProps\n>((props: ScopedProps<SelectScrollUpButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollUp, setCanScrollUp] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const canScrollUp = viewport.scrollTop > 0;\n        setCanScrollUp(canScrollUp);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollUp ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollDownButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_DOWN_BUTTON_NAME = 'SelectScrollDownButton';\n\ntype SelectScrollDownButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollDownButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollDownButton = React.forwardRef<\n  SelectScrollDownButtonElement,\n  SelectScrollDownButtonProps\n>((props: ScopedProps<SelectScrollDownButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollDown, setCanScrollDown] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const maxScroll = viewport.scrollHeight - viewport.clientHeight;\n        // we use Math.ceil here because if the UI is zoomed-in\n        // `scrollTop` is not always reported as an integer\n        const canScrollDown = Math.ceil(viewport.scrollTop) < maxScroll;\n        setCanScrollDown(canScrollDown);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollDown ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;\n\ntype SelectScrollButtonImplElement = React.ComponentRef<typeof Primitive.div>;\ninterface SelectScrollButtonImplProps extends PrimitiveDivProps {\n  onAutoScroll(): void;\n}\n\nconst SelectScrollButtonImpl = React.forwardRef<\n  SelectScrollButtonImplElement,\n  SelectScrollButtonImplProps\n>((props: ScopedProps<SelectScrollButtonImplProps>, forwardedRef) => {\n  const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;\n  const contentContext = useSelectContentContext('SelectScrollButton', __scopeSelect);\n  const autoScrollTimerRef = React.useRef<number | null>(null);\n  const getItems = useCollection(__scopeSelect);\n\n  const clearAutoScrollTimer = React.useCallback(() => {\n    if (autoScrollTimerRef.current !== null) {\n      window.clearInterval(autoScrollTimerRef.current);\n      autoScrollTimerRef.current = null;\n    }\n  }, []);\n\n  React.useEffect(() => {\n    return () => clearAutoScrollTimer();\n  }, [clearAutoScrollTimer]);\n\n  // When the viewport becomes scrollable on either side, the relevant scroll button will mount.\n  // Because it is part of the normal flow, it will push down (top button) or shrink (bottom button)\n  // the viewport, potentially causing the active item to now be partially out of view.\n  // We re-run the `scrollIntoView` logic to make sure it stays within the viewport.\n  useLayoutEffect(() => {\n    const activeItem = getItems().find((item) => item.ref.current === document.activeElement);\n    activeItem?.ref.current?.scrollIntoView({ block: 'nearest' });\n  }, [getItems]);\n\n  return (\n    <Primitive.div\n      aria-hidden\n      {...scrollIndicatorProps}\n      ref={forwardedRef}\n      style={{ flexShrink: 0, ...scrollIndicatorProps.style }}\n      onPointerDown={composeEventHandlers(scrollIndicatorProps.onPointerDown, () => {\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      })}\n      onPointerMove={composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {\n        contentContext.onItemLeave?.();\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      })}\n      onPointerLeave={composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {\n        clearAutoScrollTimer();\n      })}\n    />\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * SelectSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'SelectSeparator';\n\ntype SelectSeparatorElement = React.ComponentRef<typeof Primitive.div>;\ninterface SelectSeparatorProps extends PrimitiveDivProps {}\n\nconst SelectSeparator = React.forwardRef<SelectSeparatorElement, SelectSeparatorProps>(\n  (props: ScopedProps<SelectSeparatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...separatorProps } = props;\n    return <Primitive.div aria-hidden {...separatorProps} ref={forwardedRef} />;\n  }\n);\n\nSelectSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'SelectArrow';\n\ntype SelectArrowElement = React.ComponentRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface SelectArrowProps extends PopperArrowProps {}\n\nconst SelectArrow = React.forwardRef<SelectArrowElement, SelectArrowProps>(\n  (props: ScopedProps<SelectArrowProps>, forwardedRef) => {\n    const { __scopeSelect, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeSelect);\n    const context = useSelectContext(ARROW_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ARROW_NAME, __scopeSelect);\n    return context.open && contentContext.position === 'popper' ? (\n      <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nSelectArrow.displayName = ARROW_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectBubbleInput\n * -----------------------------------------------------------------------------------------------*/\n\nconst BUBBLE_INPUT_NAME = 'SelectBubbleInput';\n\ntype InputProps = React.ComponentPropsWithoutRef<typeof Primitive.select>;\ninterface SwitchBubbleInputProps extends InputProps {}\n\nconst SelectBubbleInput = React.forwardRef<HTMLSelectElement, SwitchBubbleInputProps>(\n  ({ __scopeSelect, value, ...props }: ScopedProps<SwitchBubbleInputProps>, forwardedRef) => {\n    const ref = React.useRef<HTMLSelectElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const prevValue = usePrevious(value);\n\n    // Bubble value change to parents (e.g form change event)\n    React.useEffect(() => {\n      const select = ref.current;\n      if (!select) return;\n\n      const selectProto = window.HTMLSelectElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        selectProto,\n        'value'\n      ) as PropertyDescriptor;\n      const setValue = descriptor.set;\n      if (prevValue !== value && setValue) {\n        const event = new Event('change', { bubbles: true });\n        setValue.call(select, value);\n        select.dispatchEvent(event);\n      }\n    }, [prevValue, value]);\n\n    /**\n     * We purposefully use a `select` here to support form autofill as much as\n     * possible.\n     *\n     * We purposefully do not add the `value` attribute here to allow the value\n     * to be set programmatically and bubble to any parent form `onChange`\n     * event. Adding the `value` will cause React to consider the programmatic\n     * dispatch a duplicate and it will get swallowed.\n     *\n     * We use visually hidden styles rather than `display: \"none\"` because\n     * Safari autofill won't work otherwise.\n     */\n    return (\n      <Primitive.select\n        {...props}\n        style={{ ...VISUALLY_HIDDEN_STYLES, ...props.style }}\n        ref={composedRefs}\n        defaultValue={value}\n      />\n    );\n  }\n);\n\nSelectBubbleInput.displayName = BUBBLE_INPUT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction shouldShowPlaceholder(value?: string) {\n  return value === '' || value === undefined;\n}\n\nfunction useTypeaheadSearch(onSearchChange: (search: string) => void) {\n  const handleSearchChange = useCallbackRef(onSearchChange);\n  const searchRef = React.useRef('');\n  const timerRef = React.useRef(0);\n\n  const handleTypeaheadSearch = React.useCallback(\n    (key: string) => {\n      const search = searchRef.current + key;\n      handleSearchChange(search);\n\n      (function updateSearch(value: string) {\n        searchRef.current = value;\n        window.clearTimeout(timerRef.current);\n        // Reset `searchRef` 1 second after it was last updated\n        if (value !== '') timerRef.current = window.setTimeout(() => updateSearch(''), 1000);\n      })(search);\n    },\n    [handleSearchChange]\n  );\n\n  const resetTypeahead = React.useCallback(() => {\n    searchRef.current = '';\n    window.clearTimeout(timerRef.current);\n  }, []);\n\n  React.useEffect(() => {\n    return () => window.clearTimeout(timerRef.current);\n  }, []);\n\n  return [searchRef, handleTypeaheadSearch, resetTypeahead] as const;\n}\n\n/**\n * This is the \"meat\" of the typeahead matching logic. It takes in a list of items,\n * the search and the current item, and returns the next item (or `undefined`).\n *\n * We normalize the search because if a user has repeatedly pressed a character,\n * we want the exact same behavior as if we only had that one character\n * (ie. cycle through items starting with that character)\n *\n * We also reorder the items by wrapping the array around the current item.\n * This is so we always look forward from the current item, and picking the first\n * item will always be the correct one.\n *\n * Finally, if the normalized search is exactly one character, we exclude the\n * current item from the values because otherwise it would be the first to match always\n * and focus would never move. This is as opposed to the regular case, where we\n * don't want focus to move if the current item still matches.\n */\nfunction findNextItem<T extends { textValue: string }>(\n  items: T[],\n  search: string,\n  currentItem?: T\n) {\n  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0]! : search;\n  const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;\n  let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));\n  const excludeCurrentItem = normalizedSearch.length === 1;\n  if (excludeCurrentItem) wrappedItems = wrappedItems.filter((v) => v !== currentItem);\n  const nextItem = wrappedItems.find((item) =>\n    item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase())\n  );\n  return nextItem !== currentItem ? nextItem : undefined;\n}\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map<T>((_, index) => array[(startIndex + index) % array.length]!);\n}\n\nconst Root = Select;\nconst Trigger = SelectTrigger;\nconst Value = SelectValue;\nconst Icon = SelectIcon;\nconst Portal = SelectPortal;\nconst Content = SelectContent;\nconst Viewport = SelectViewport;\nconst Group = SelectGroup;\nconst Label = SelectLabel;\nconst Item = SelectItem;\nconst ItemText = SelectItemText;\nconst ItemIndicator = SelectItemIndicator;\nconst ScrollUpButton = SelectScrollUpButton;\nconst ScrollDownButton = SelectScrollDownButton;\nconst Separator = SelectSeparator;\nconst Arrow = SelectArrow;\n\nexport {\n  createSelectScope,\n  //\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectIcon,\n  SelectPortal,\n  SelectContent,\n  SelectViewport,\n  SelectGroup,\n  SelectLabel,\n  SelectItem,\n  SelectItemText,\n  SelectItemIndicator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n  SelectSeparator,\n  SelectArrow,\n  //\n  Root,\n  Trigger,\n  Value,\n  Icon,\n  Portal,\n  Content,\n  Viewport,\n  Group,\n  Label,\n  Item,\n  ItemText,\n  ItemIndicator,\n  ScrollUpButton,\n  ScrollDownButton,\n  Separator,\n  Arrow,\n};\nexport type {\n  SelectProps,\n  SelectTriggerProps,\n  SelectValueProps,\n  SelectIconProps,\n  SelectPortalProps,\n  SelectContentProps,\n  SelectViewportProps,\n  SelectGroupProps,\n  SelectLabelProps,\n  SelectItemProps,\n  SelectItemTextProps,\n  SelectItemIndicatorProps,\n  SelectScrollUpButtonProps,\n  SelectScrollDownButtonProps,\n  SelectSeparatorProps,\n  SelectArrowProps,\n};\n"],"mappings":";;;AAAA,YAAYA,KAAA,MAAW;AACvB,YAAYC,QAAA,MAAc;AAC1B,SAASC,KAAA,QAAa;AACtB,SAASC,oBAAA,QAA4B;AACrC,SAASC,gBAAA,QAAwB;AACjC,SAASC,eAAA,QAAuB;AAChC,SAASC,kBAAA,QAA0B;AACnC,SAASC,YAAA,QAAoB;AAC7B,SAASC,gBAAA,QAAwB;AACjC,SAASC,cAAA,QAAsB;AAC/B,SAASC,UAAA,QAAkB;AAC3B,SAASC,KAAA,QAAa;AACtB,YAAYC,eAAA,MAAqB;AACjC,SAASC,iBAAA,QAAyB;AAClC,SAASC,MAAA,IAAUC,eAAA,QAAuB;AAC1C,SAASC,SAAA,QAAiB;AAC1B,SAASC,UAAA,QAAkB;AAC3B,SAASC,cAAA,QAAsB;AAC/B,SAASC,oBAAA,QAA4B;AACrC,SAASC,eAAA,QAAuB;AAChC,SAASC,WAAA,QAAmB;AAC5B,SAASC,sBAAA,QAA8B;AACvC,SAASC,UAAA,QAAkB;AAC3B,SAASC,YAAA,QAAoB;AAiLnB,SA0LsCC,QAAA,EA1LtCC,GAAA,EAkBAC,IAAA,QAlBA;AA3KV,IAAMC,SAAA,GAAY,CAAC,KAAK,SAAS,WAAW,WAAW;AACvD,IAAMC,cAAA,GAAiB,CAAC,KAAK,OAAO;AAMpC,IAAMC,WAAA,GAAc;AAGpB,IAAM,CAACC,UAAA,EAAYC,aAAA,EAAeC,qBAAqB,IAAI7B,gBAAA,CAGzD0B,WAAW;AAGb,IAAM,CAACI,mBAAA,EAAqBC,iBAAiB,IAAI7B,kBAAA,CAAmBwB,WAAA,EAAa,CAC/EG,qBAAA,EACApB,iBAAA,CACD;AACD,IAAMuB,cAAA,GAAiBvB,iBAAA,CAAkB;AAoBzC,IAAM,CAACwB,cAAA,EAAgBC,gBAAgB,IAAIJ,mBAAA,CAAwCJ,WAAW;AAQ9F,IAAM,CAACS,2BAAA,EAA6BC,6BAA6B,IAC/DN,mBAAA,CAAqDJ,WAAW;AAoDlE,IAAMW,MAAA,GAAiCC,KAAA,IAAoC;EACzE,MAAM;IACJC,aAAA;IACAC,QAAA;IACAC,IAAA,EAAMC,QAAA;IACNC,WAAA;IACAC,YAAA;IACAC,KAAA,EAAOC,SAAA;IACPC,YAAA;IACAC,aAAA;IACAC,GAAA;IACAC,IAAA;IACAC,YAAA;IACAC,QAAA;IACAC,QAAA;IACAC;EACF,IAAIhB,KAAA;EACJ,MAAMiB,WAAA,GAAcvB,cAAA,CAAeO,aAAa;EAChD,MAAM,CAACiB,OAAA,EAASC,UAAU,IAAU7D,KAAA,CAAA8D,QAAA,CAAsC,IAAI;EAC9E,MAAM,CAACC,SAAA,EAAWC,YAAY,IAAUhE,KAAA,CAAA8D,QAAA,CAAoC,IAAI;EAChF,MAAM,CAACG,oBAAA,EAAsBC,uBAAuB,IAAUlE,KAAA,CAAA8D,QAAA,CAAS,KAAK;EAC5E,MAAMK,SAAA,GAAY5D,YAAA,CAAa8C,GAAG;EAClC,MAAM,CAACR,IAAA,EAAMuB,OAAO,IAAIjD,oBAAA,CAAqB;IAC3CkD,IAAA,EAAMvB,QAAA;IACNwB,WAAA,EAAavB,WAAA,IAAe;IAC5BwB,QAAA,EAAUvB,YAAA;IACVwB,MAAA,EAAQ1C;EACV,CAAC;EACD,MAAM,CAACmB,KAAA,EAAOwB,QAAQ,IAAItD,oBAAA,CAAqB;IAC7CkD,IAAA,EAAMnB,SAAA;IACNoB,WAAA,EAAanB,YAAA;IACboB,QAAA,EAAUnB,aAAA;IACVoB,MAAA,EAAQ1C;EACV,CAAC;EACD,MAAM4C,wBAAA,GAAiC1E,KAAA,CAAA2E,MAAA,CAAwC,IAAI;EAGnF,MAAMC,aAAA,GAAgBhB,OAAA,GAAUF,IAAA,IAAQ,CAAC,CAACE,OAAA,CAAQiB,OAAA,CAAQ,MAAM,IAAI;EACpE,MAAM,CAACC,gBAAA,EAAkBC,mBAAmB,IAAU/E,KAAA,CAAA8D,QAAA,CAAS,mBAAIkB,GAAA,CAAkB,CAAC;EAOtF,MAAMC,eAAA,GAAkBC,KAAA,CAAMC,IAAA,CAAKL,gBAAgB,EAChDM,GAAA,CAAKC,MAAA,IAAWA,MAAA,CAAO3C,KAAA,CAAMO,KAAK,EAClCqC,IAAA,CAAK,GAAG;EAEX,OACE,eAAA5D,GAAA,CAAiBd,eAAA,CAAA2E,IAAA,EAAhB;IAAsB,GAAG5B,WAAA;IACxBf,QAAA,iBAAAjB,IAAA,CAACU,cAAA;MACCoB,QAAA;MACA+B,KAAA,EAAO7C,aAAA;MACPiB,OAAA;MACA6B,eAAA,EAAiB5B,UAAA;MACjBE,SAAA;MACA2B,iBAAA,EAAmB1B,YAAA;MACnBC,oBAAA;MACA0B,4BAAA,EAA8BzB,uBAAA;MAC9B0B,SAAA,EAAWjF,KAAA,CAAM;MACjBsC,KAAA;MACAG,aAAA,EAAeqB,QAAA;MACf5B,IAAA;MACAG,YAAA,EAAcoB,OAAA;MACdf,GAAA,EAAKc,SAAA;MACLO,wBAAA;MACAlB,QAAA;MAEAZ,QAAA,kBAAAlB,GAAA,CAACK,UAAA,CAAW8D,QAAA,EAAX;QAAoBL,KAAA,EAAO7C,aAAA;QAC1BC,QAAA,iBAAAlB,GAAA,CAACa,2BAAA;UACCiD,KAAA,EAAO9C,KAAA,CAAMC,aAAA;UACbmD,iBAAA,EAAyB9F,KAAA,CAAA+F,WAAA,CAAaV,MAAA,IAAW;YAC/CN,mBAAA,CAAqBiB,IAAA,IAAS,IAAIhB,GAAA,CAAIgB,IAAI,EAAEC,GAAA,CAAIZ,MAAM,CAAC;UACzD,GAAG,EAAE;UACLa,oBAAA,EAA4BlG,KAAA,CAAA+F,WAAA,CAAaV,MAAA,IAAW;YAClDN,mBAAA,CAAqBiB,IAAA,IAAS;cAC5B,MAAMG,UAAA,GAAa,IAAInB,GAAA,CAAIgB,IAAI;cAC/BG,UAAA,CAAWC,MAAA,CAAOf,MAAM;cACxB,OAAOc,UAAA;YACT,CAAC;UACH,GAAG,EAAE;UAEJvD;QAAA,CACH;MAAA,CACF,GAECgC,aAAA,GACC,eAAAjD,IAAA,CAAC0E,iBAAA;QAEC,eAAW;QACX5C,QAAA;QACA6C,QAAA,EAAU;QACVhD,IAAA;QACAC,YAAA;QACAN,KAAA;QAEAsB,QAAA,EAAWgC,KAAA,IAAU9B,QAAA,CAAS8B,KAAA,CAAMC,MAAA,CAAOvD,KAAK;QAChDO,QAAA;QACAE,IAAA;QAECd,QAAA,GAAAK,KAAA,KAAU,SAAY,eAAAvB,GAAA,CAAC;UAAOuB,KAAA,EAAM;QAAA,CAAG,IAAK,MAC5CiC,KAAA,CAAMC,IAAA,CAAKL,gBAAgB;MAAA,GAbvBG,eAcP,IACE;IAAA,CACN;EAAA,CACF;AAEJ;AAEAxC,MAAA,CAAOgE,WAAA,GAAc3E,WAAA;AAMrB,IAAM4E,YAAA,GAAe;AAMrB,IAAMC,aAAA,GAAsB3G,KAAA,CAAA4G,UAAA,CAC1B,CAAClE,KAAA,EAAwCmE,YAAA,KAAiB;EACxD,MAAM;IAAElE,aAAA;IAAea,QAAA,GAAW;IAAO,GAAGsD;EAAa,IAAIpE,KAAA;EAC7D,MAAMiB,WAAA,GAAcvB,cAAA,CAAeO,aAAa;EAChD,MAAMoE,OAAA,GAAUzE,gBAAA,CAAiBoE,YAAA,EAAc/D,aAAa;EAC5D,MAAMqE,UAAA,GAAaD,OAAA,CAAQvD,QAAA,IAAYA,QAAA;EACvC,MAAMyD,YAAA,GAAe5G,eAAA,CAAgBwG,YAAA,EAAcE,OAAA,CAAQtB,eAAe;EAC1E,MAAMyB,QAAA,GAAWlF,aAAA,CAAcW,aAAa;EAC5C,MAAMwE,cAAA,GAAuBnH,KAAA,CAAA2E,MAAA,CAA0C,OAAO;EAE9E,MAAM,CAACyC,SAAA,EAAWC,qBAAA,EAAuBC,cAAc,IAAIC,kBAAA,CAAoBC,MAAA,IAAW;IACxF,MAAMC,YAAA,GAAeP,QAAA,CAAS,EAAEQ,MAAA,CAAQC,IAAA,IAAS,CAACA,IAAA,CAAKnE,QAAQ;IAC/D,MAAMoE,WAAA,GAAcH,YAAA,CAAaI,IAAA,CAAMF,IAAA,IAASA,IAAA,CAAK1E,KAAA,KAAU8D,OAAA,CAAQ9D,KAAK;IAC5E,MAAM6E,QAAA,GAAWC,YAAA,CAAaN,YAAA,EAAcD,MAAA,EAAQI,WAAW;IAC/D,IAAIE,QAAA,KAAa,QAAW;MAC1Bf,OAAA,CAAQ3D,aAAA,CAAc0E,QAAA,CAAS7E,KAAK;IACtC;EACF,CAAC;EAED,MAAM+E,UAAA,GAAcC,YAAA,IAAyD;IAC3E,IAAI,CAACjB,UAAA,EAAY;MACfD,OAAA,CAAQ/D,YAAA,CAAa,IAAI;MAEzBsE,cAAA,CAAe;IACjB;IAEA,IAAIW,YAAA,EAAc;MAChBlB,OAAA,CAAQrC,wBAAA,CAAyBwD,OAAA,GAAU;QACzCC,CAAA,EAAGC,IAAA,CAAKC,KAAA,CAAMJ,YAAA,CAAaK,KAAK;QAChCC,CAAA,EAAGH,IAAA,CAAKC,KAAA,CAAMJ,YAAA,CAAaO,KAAK;MAClC;IACF;EACF;EAEA,OACE,eAAA9G,GAAA,CAAiBd,eAAA,CAAA6H,MAAA,EAAhB;IAAuBC,OAAA,EAAO;IAAE,GAAG/E,WAAA;IAClCf,QAAA,iBAAAlB,GAAA,CAACV,SAAA,CAAU2H,MAAA,EAAV;MACCC,IAAA,EAAK;MACLC,IAAA,EAAK;MACL,iBAAe9B,OAAA,CAAQnB,SAAA;MACvB,iBAAemB,OAAA,CAAQlE,IAAA;MACvB,iBAAekE,OAAA,CAAQtD,QAAA;MACvB,qBAAkB;MAClBJ,GAAA,EAAK0D,OAAA,CAAQ1D,GAAA;MACb,cAAY0D,OAAA,CAAQlE,IAAA,GAAO,SAAS;MACpCW,QAAA,EAAUwD,UAAA;MACV,iBAAeA,UAAA,GAAa,KAAK;MACjC,oBAAkB8B,qBAAA,CAAsB/B,OAAA,CAAQ9D,KAAK,IAAI,KAAK;MAC7D,GAAG6D,YAAA;MACJiC,GAAA,EAAK9B,YAAA;MAEL+B,OAAA,EAAS7I,oBAAA,CAAqB2G,YAAA,CAAakC,OAAA,EAAUzC,KAAA,IAAU;QAM7DA,KAAA,CAAM0C,aAAA,CAAcC,KAAA,CAAM;QAG1B,IAAI/B,cAAA,CAAee,OAAA,KAAY,SAAS;UACtCF,UAAA,CAAWzB,KAAK;QAClB;MACF,CAAC;MACD4C,aAAA,EAAehJ,oBAAA,CAAqB2G,YAAA,CAAaqC,aAAA,EAAgB5C,KAAA,IAAU;QACzEY,cAAA,CAAee,OAAA,GAAU3B,KAAA,CAAM6C,WAAA;QAI/B,MAAM5C,MAAA,GAASD,KAAA,CAAMC,MAAA;QACrB,IAAIA,MAAA,CAAO6C,iBAAA,CAAkB9C,KAAA,CAAM+C,SAAS,GAAG;UAC7C9C,MAAA,CAAO+C,qBAAA,CAAsBhD,KAAA,CAAM+C,SAAS;QAC9C;QAKA,IAAI/C,KAAA,CAAMoC,MAAA,KAAW,KAAKpC,KAAA,CAAMiD,OAAA,KAAY,SAASjD,KAAA,CAAM6C,WAAA,KAAgB,SAAS;UAClFpB,UAAA,CAAWzB,KAAK;UAEhBA,KAAA,CAAMkD,cAAA,CAAe;QACvB;MACF,CAAC;MACDC,SAAA,EAAWvJ,oBAAA,CAAqB2G,YAAA,CAAa4C,SAAA,EAAYnD,KAAA,IAAU;QACjE,MAAMoD,aAAA,GAAgBvC,SAAA,CAAUc,OAAA,KAAY;QAC5C,MAAM0B,aAAA,GAAgBrD,KAAA,CAAMiD,OAAA,IAAWjD,KAAA,CAAMsD,MAAA,IAAUtD,KAAA,CAAMuD,OAAA;QAC7D,IAAI,CAACF,aAAA,IAAiBrD,KAAA,CAAMwD,GAAA,CAAIC,MAAA,KAAW,GAAG3C,qBAAA,CAAsBd,KAAA,CAAMwD,GAAG;QAC7E,IAAIJ,aAAA,IAAiBpD,KAAA,CAAMwD,GAAA,KAAQ,KAAK;QACxC,IAAInI,SAAA,CAAUqI,QAAA,CAAS1D,KAAA,CAAMwD,GAAG,GAAG;UACjC/B,UAAA,CAAW;UACXzB,KAAA,CAAMkD,cAAA,CAAe;QACvB;MACF,CAAC;IAAA,CACH;EAAA,CACF;AAEJ,CACF;AAEA9C,aAAA,CAAcF,WAAA,GAAcC,YAAA;AAM5B,IAAMwD,UAAA,GAAa;AAQnB,IAAMC,WAAA,GAAoBnK,KAAA,CAAA4G,UAAA,CACxB,CAAClE,KAAA,EAAsCmE,YAAA,KAAiB;EAEtD,MAAM;IAAElE,aAAA;IAAeyH,SAAA;IAAWC,KAAA;IAAOzH,QAAA;IAAU0H,WAAA,GAAc;IAAI,GAAGC;EAAW,IAAI7H,KAAA;EACvF,MAAMqE,OAAA,GAAUzE,gBAAA,CAAiB4H,UAAA,EAAYvH,aAAa;EAC1D,MAAM;IAAEgD;EAA6B,IAAIoB,OAAA;EACzC,MAAMyD,WAAA,GAAc5H,QAAA,KAAa;EACjC,MAAMqE,YAAA,GAAe5G,eAAA,CAAgBwG,YAAA,EAAcE,OAAA,CAAQrB,iBAAiB;EAE5EtE,eAAA,CAAgB,MAAM;IACpBuE,4BAAA,CAA6B6E,WAAW;EAC1C,GAAG,CAAC7E,4BAAA,EAA8B6E,WAAW,CAAC;EAE9C,OACE,eAAA9I,GAAA,CAACV,SAAA,CAAUyJ,IAAA,EAAV;IACE,GAAGF,UAAA;IACJxB,GAAA,EAAK9B,YAAA;IAGLoD,KAAA,EAAO;MAAEK,aAAA,EAAe;IAAO;IAE9B9H,QAAA,EAAAkG,qBAAA,CAAsB/B,OAAA,CAAQ9D,KAAK,IAAI,eAAAvB,GAAA,CAAAD,QAAA;MAAGmB,QAAA,EAAA0H;IAAA,CAAY,IAAM1H;EAAA,CAC/D;AAEJ,CACF;AAEAuH,WAAA,CAAY1D,WAAA,GAAcyD,UAAA;AAM1B,IAAMS,SAAA,GAAY;AAKlB,IAAMC,UAAA,GAAmB5K,KAAA,CAAA4G,UAAA,CACvB,CAAClE,KAAA,EAAqCmE,YAAA,KAAiB;EACrD,MAAM;IAAElE,aAAA;IAAeC,QAAA;IAAU,GAAGiI;EAAU,IAAInI,KAAA;EAClD,OACE,eAAAhB,GAAA,CAACV,SAAA,CAAUyJ,IAAA,EAAV;IAAe,eAAW;IAAE,GAAGI,SAAA;IAAW9B,GAAA,EAAKlC,YAAA;IAC7CjE,QAAA,EAAAA,QAAA,IAAY;EAAA,CACf;AAEJ,CACF;AAEAgI,UAAA,CAAWnE,WAAA,GAAckE,SAAA;AAMzB,IAAMG,WAAA,GAAc;AAWpB,IAAMC,YAAA,GAA6CrI,KAAA,IAA0C;EAC3F,OAAO,eAAAhB,GAAA,CAACX,eAAA;IAAgB2H,OAAA,EAAO;IAAE,GAAGhG;EAAA,CAAO;AAC7C;AAEAqI,YAAA,CAAatE,WAAA,GAAcqE,WAAA;AAM3B,IAAME,YAAA,GAAe;AAKrB,IAAMC,aAAA,GAAsBjL,KAAA,CAAA4G,UAAA,CAC1B,CAAClE,KAAA,EAAwCmE,YAAA,KAAiB;EACxD,MAAME,OAAA,GAAUzE,gBAAA,CAAiB0I,YAAA,EAActI,KAAA,CAAMC,aAAa;EAClE,MAAM,CAACuI,QAAA,EAAUC,WAAW,IAAUnL,KAAA,CAAA8D,QAAA,CAA2B;EAGjE1C,eAAA,CAAgB,MAAM;IACpB+J,WAAA,CAAY,IAAIC,gBAAA,CAAiB,CAAC;EACpC,GAAG,EAAE;EAEL,IAAI,CAACrE,OAAA,CAAQlE,IAAA,EAAM;IACjB,MAAMwI,IAAA,GAAOH,QAAA;IACb,OAAOG,IAAA,GACMpL,QAAA,CAAAqL,YAAA,CACP,eAAA5J,GAAA,CAAC6J,qBAAA;MAAsB/F,KAAA,EAAO9C,KAAA,CAAMC,aAAA;MAClCC,QAAA,iBAAAlB,GAAA,CAACK,UAAA,CAAWyJ,IAAA,EAAX;QAAgBhG,KAAA,EAAO9C,KAAA,CAAMC,aAAA;QAC5BC,QAAA,iBAAAlB,GAAA,CAAC;UAAKkB,QAAA,EAAAF,KAAA,CAAME;QAAA,CAAS;MAAA,CACvB;IAAA,CACF,GACAyI,IACF,IACA;EACN;EAEA,OAAO,eAAA3J,GAAA,CAAC+J,iBAAA;IAAmB,GAAG/I,KAAA;IAAOqG,GAAA,EAAKlC;EAAA,CAAc;AAC1D,CACF;AAEAoE,aAAA,CAAcxE,WAAA,GAAcuE,YAAA;AAM5B,IAAMU,cAAA,GAAiB;AAqBvB,IAAM,CAACH,qBAAA,EAAuBI,uBAAuB,IACnDzJ,mBAAA,CAA+C8I,YAAY;AAE7D,IAAMY,iBAAA,GAAoB;AA8B1B,IAAMJ,IAAA,GAAOvK,UAAA,CAAW,4BAA4B;AAEpD,IAAMwK,iBAAA,GAA0BzL,KAAA,CAAA4G,UAAA,CAC9B,CAAClE,KAAA,EAA4CmE,YAAA,KAAiB;EAC5D,MAAM;IACJlE,aAAA;IACAkJ,QAAA,GAAW;IACXC,gBAAA;IACAC,eAAA;IACAC,oBAAA;IAAA;IAAA;IAGAC,IAAA;IACAC,UAAA;IACAC,KAAA;IACAC,WAAA;IACAC,YAAA;IACAC,iBAAA;IACAC,gBAAA;IACAC,MAAA;IACAC,gBAAA;IACAC,eAAA;IAAA;IAEA,GAAGC;EACL,IAAIjK,KAAA;EACJ,MAAMqE,OAAA,GAAUzE,gBAAA,CAAiB0I,YAAA,EAAcrI,aAAa;EAC5D,MAAM,CAACiK,OAAA,EAASC,UAAU,IAAU7M,KAAA,CAAA8D,QAAA,CAA0C,IAAI;EAClF,MAAM,CAACgJ,QAAA,EAAUC,WAAW,IAAU/M,KAAA,CAAA8D,QAAA,CAAuC,IAAI;EACjF,MAAMmD,YAAA,GAAe5G,eAAA,CAAgBwG,YAAA,EAAemG,IAAA,IAASH,UAAA,CAAWG,IAAI,CAAC;EAC7E,MAAM,CAACC,YAAA,EAAcC,eAAe,IAAUlN,KAAA,CAAA8D,QAAA,CAAmC,IAAI;EACrF,MAAM,CAACqJ,gBAAA,EAAkBC,mBAAmB,IAAUpN,KAAA,CAAA8D,QAAA,CACpD,IACF;EACA,MAAMoD,QAAA,GAAWlF,aAAA,CAAcW,aAAa;EAC5C,MAAM,CAAC0K,YAAA,EAAcC,eAAe,IAAUtN,KAAA,CAAA8D,QAAA,CAAS,KAAK;EAC5D,MAAMyJ,sBAAA,GAA+BvN,KAAA,CAAA2E,MAAA,CAAO,KAAK;EAG3C3E,KAAA,CAAAwN,SAAA,CAAU,MAAM;IACpB,IAAIZ,OAAA,EAAS,OAAOrL,UAAA,CAAWqL,OAAO;EACxC,GAAG,CAACA,OAAO,CAAC;EAIZnM,cAAA,CAAe;EAEf,MAAMgN,UAAA,GAAmBzN,KAAA,CAAA+F,WAAA,CACtB2H,UAAA,IAA0C;IACzC,MAAM,CAACC,SAAA,EAAW,GAAGC,SAAS,IAAI1G,QAAA,CAAS,EAAE9B,GAAA,CAAKuC,IAAA,IAASA,IAAA,CAAKoB,GAAA,CAAIb,OAAO;IAC3E,MAAM,CAAC2F,QAAQ,IAAID,SAAA,CAAUE,KAAA,CAAM,EAAE;IAErC,MAAMC,0BAAA,GAA6BC,QAAA,CAASC,aAAA;IAC5C,WAAWC,SAAA,IAAaR,UAAA,EAAY;MAElC,IAAIQ,SAAA,KAAcH,0BAAA,EAA4B;MAC9CG,SAAA,EAAWC,cAAA,CAAe;QAAEC,KAAA,EAAO;MAAU,CAAC;MAE9C,IAAIF,SAAA,KAAcP,SAAA,IAAab,QAAA,EAAUA,QAAA,CAASuB,SAAA,GAAY;MAC9D,IAAIH,SAAA,KAAcL,QAAA,IAAYf,QAAA,EAAUA,QAAA,CAASuB,SAAA,GAAYvB,QAAA,CAASwB,YAAA;MACtEJ,SAAA,EAAWhF,KAAA,CAAM;MACjB,IAAI8E,QAAA,CAASC,aAAA,KAAkBF,0BAAA,EAA4B;IAC7D;EACF,GACA,CAAC7G,QAAA,EAAU4F,QAAQ,CACrB;EAEA,MAAMyB,iBAAA,GAA0BvO,KAAA,CAAA+F,WAAA,CAC9B,MAAM0H,UAAA,CAAW,CAACR,YAAA,EAAcL,OAAO,CAAC,GACxC,CAACa,UAAA,EAAYR,YAAA,EAAcL,OAAO,CACpC;EAIM5M,KAAA,CAAAwN,SAAA,CAAU,MAAM;IACpB,IAAIH,YAAA,EAAc;MAChBkB,iBAAA,CAAkB;IACpB;EACF,GAAG,CAAClB,YAAA,EAAckB,iBAAiB,CAAC;EAIpC,MAAM;IAAEvL,YAAA;IAAc0B;EAAyB,IAAIqC,OAAA;EAC7C/G,KAAA,CAAAwN,SAAA,CAAU,MAAM;IACpB,IAAIZ,OAAA,EAAS;MACX,IAAI4B,gBAAA,GAAmB;QAAErG,CAAA,EAAG;QAAGI,CAAA,EAAG;MAAE;MAEpC,MAAMkG,iBAAA,GAAqBlI,KAAA,IAAwB;QACjDiI,gBAAA,GAAmB;UACjBrG,CAAA,EAAGC,IAAA,CAAKsG,GAAA,CAAItG,IAAA,CAAKC,KAAA,CAAM9B,KAAA,CAAM+B,KAAK,KAAK5D,wBAAA,CAAyBwD,OAAA,EAASC,CAAA,IAAK,EAAE;UAChFI,CAAA,EAAGH,IAAA,CAAKsG,GAAA,CAAItG,IAAA,CAAKC,KAAA,CAAM9B,KAAA,CAAMiC,KAAK,KAAK9D,wBAAA,CAAyBwD,OAAA,EAASK,CAAA,IAAK,EAAE;QAClF;MACF;MACA,MAAMoG,eAAA,GAAmBpI,KAAA,IAAwB;QAE/C,IAAIiI,gBAAA,CAAiBrG,CAAA,IAAK,MAAMqG,gBAAA,CAAiBjG,CAAA,IAAK,IAAI;UACxDhC,KAAA,CAAMkD,cAAA,CAAe;QACvB,OAAO;UAEL,IAAI,CAACmD,OAAA,CAAQgC,QAAA,CAASrI,KAAA,CAAMC,MAAqB,GAAG;YAClDxD,YAAA,CAAa,KAAK;UACpB;QACF;QACAgL,QAAA,CAASa,mBAAA,CAAoB,eAAeJ,iBAAiB;QAC7D/J,wBAAA,CAAyBwD,OAAA,GAAU;MACrC;MAEA,IAAIxD,wBAAA,CAAyBwD,OAAA,KAAY,MAAM;QAC7C8F,QAAA,CAASc,gBAAA,CAAiB,eAAeL,iBAAiB;QAC1DT,QAAA,CAASc,gBAAA,CAAiB,aAAaH,eAAA,EAAiB;UAAEI,OAAA,EAAS;UAAMC,IAAA,EAAM;QAAK,CAAC;MACvF;MAEA,OAAO,MAAM;QACXhB,QAAA,CAASa,mBAAA,CAAoB,eAAeJ,iBAAiB;QAC7DT,QAAA,CAASa,mBAAA,CAAoB,aAAaF,eAAA,EAAiB;UAAEI,OAAA,EAAS;QAAK,CAAC;MAC9E;IACF;EACF,GAAG,CAACnC,OAAA,EAAS5J,YAAA,EAAc0B,wBAAwB,CAAC;EAE9C1E,KAAA,CAAAwN,SAAA,CAAU,MAAM;IACpB,MAAMyB,KAAA,GAAQA,CAAA,KAAMjM,YAAA,CAAa,KAAK;IACtCkM,MAAA,CAAOJ,gBAAA,CAAiB,QAAQG,KAAK;IACrCC,MAAA,CAAOJ,gBAAA,CAAiB,UAAUG,KAAK;IACvC,OAAO,MAAM;MACXC,MAAA,CAAOL,mBAAA,CAAoB,QAAQI,KAAK;MACxCC,MAAA,CAAOL,mBAAA,CAAoB,UAAUI,KAAK;IAC5C;EACF,GAAG,CAACjM,YAAY,CAAC;EAEjB,MAAM,CAACoE,SAAA,EAAWC,qBAAqB,IAAIE,kBAAA,CAAoBC,MAAA,IAAW;IACxE,MAAMC,YAAA,GAAeP,QAAA,CAAS,EAAEQ,MAAA,CAAQC,IAAA,IAAS,CAACA,IAAA,CAAKnE,QAAQ;IAC/D,MAAMoE,WAAA,GAAcH,YAAA,CAAaI,IAAA,CAAMF,IAAA,IAASA,IAAA,CAAKoB,GAAA,CAAIb,OAAA,KAAY8F,QAAA,CAASC,aAAa;IAC3F,MAAMnG,QAAA,GAAWC,YAAA,CAAaN,YAAA,EAAcD,MAAA,EAAQI,WAAW;IAC/D,IAAIE,QAAA,EAAU;MAKZqH,UAAA,CAAW,MAAOrH,QAAA,CAASiB,GAAA,CAAIb,OAAA,CAAwBgB,KAAA,CAAM,CAAC;IAChE;EACF,CAAC;EAED,MAAMkG,eAAA,GAAwBpP,KAAA,CAAA+F,WAAA,CAC5B,CAACiH,IAAA,EAAgC/J,KAAA,EAAeO,QAAA,KAAsB;IACpE,MAAM6L,gBAAA,GAAmB,CAAC9B,sBAAA,CAAuBrF,OAAA,IAAW,CAAC1E,QAAA;IAC7D,MAAM8L,cAAA,GAAiBvI,OAAA,CAAQ9D,KAAA,KAAU,UAAa8D,OAAA,CAAQ9D,KAAA,KAAUA,KAAA;IACxE,IAAIqM,cAAA,IAAkBD,gBAAA,EAAkB;MACtCnC,eAAA,CAAgBF,IAAI;MACpB,IAAIqC,gBAAA,EAAkB9B,sBAAA,CAAuBrF,OAAA,GAAU;IACzD;EACF,GACA,CAACnB,OAAA,CAAQ9D,KAAK,CAChB;EACA,MAAMsM,eAAA,GAAwBvP,KAAA,CAAA+F,WAAA,CAAY,MAAM6G,OAAA,EAAS1D,KAAA,CAAM,GAAG,CAAC0D,OAAO,CAAC;EAC3E,MAAM4C,mBAAA,GAA4BxP,KAAA,CAAA+F,WAAA,CAChC,CAACiH,IAAA,EAAoC/J,KAAA,EAAeO,QAAA,KAAsB;IACxE,MAAM6L,gBAAA,GAAmB,CAAC9B,sBAAA,CAAuBrF,OAAA,IAAW,CAAC1E,QAAA;IAC7D,MAAM8L,cAAA,GAAiBvI,OAAA,CAAQ9D,KAAA,KAAU,UAAa8D,OAAA,CAAQ9D,KAAA,KAAUA,KAAA;IACxE,IAAIqM,cAAA,IAAkBD,gBAAA,EAAkB;MACtCjC,mBAAA,CAAoBJ,IAAI;IAC1B;EACF,GACA,CAACjG,OAAA,CAAQ9D,KAAK,CAChB;EAEA,MAAMwM,cAAA,GAAiB5D,QAAA,KAAa,WAAW6D,oBAAA,GAAuBC,yBAAA;EAGtE,MAAMC,kBAAA,GACJH,cAAA,KAAmBC,oBAAA,GACf;IACEzD,IAAA;IACAC,UAAA;IACAC,KAAA;IACAC,WAAA;IACAC,YAAA;IACAC,iBAAA;IACAC,gBAAA;IACAC,MAAA;IACAC,gBAAA;IACAC;EACF,IACA,CAAC;EAEP,OACE,eAAAhL,GAAA,CAAC6J,qBAAA;IACC/F,KAAA,EAAO7C,aAAA;IACPiK,OAAA;IACAE,QAAA;IACA+C,gBAAA,EAAkB9C,WAAA;IAClBqC,eAAA;IACAnC,YAAA;IACA6C,WAAA,EAAaP,eAAA;IACbC,mBAAA;IACAjB,iBAAA;IACApB,gBAAA;IACAtB,QAAA;IACAwB,YAAA;IACAjG,SAAA;IAEAxE,QAAA,iBAAAlB,GAAA,CAACF,YAAA;MAAauO,EAAA,EAAIvE,IAAA;MAAMwE,cAAA,EAAc;MACpCpN,QAAA,iBAAAlB,GAAA,CAAChB,UAAA;QACCgI,OAAA,EAAO;QAGPuH,OAAA,EAASlJ,OAAA,CAAQlE,IAAA;QACjBqN,gBAAA,EAAmB3J,KAAA,IAAU;UAE3BA,KAAA,CAAMkD,cAAA,CAAe;QACvB;QACA0G,kBAAA,EAAoBhQ,oBAAA,CAAqB2L,gBAAA,EAAmBvF,KAAA,IAAU;UACpEQ,OAAA,CAAQnD,OAAA,EAASsF,KAAA,CAAM;YAAEkH,aAAA,EAAe;UAAK,CAAC;UAC9C7J,KAAA,CAAMkD,cAAA,CAAe;QACvB,CAAC;QAED7G,QAAA,iBAAAlB,GAAA,CAAClB,gBAAA;UACCkI,OAAA,EAAO;UACP2H,2BAAA,EAA2B;UAC3BtE,eAAA;UACAC,oBAAA;UAGAsE,cAAA,EAAiB/J,KAAA,IAAUA,KAAA,CAAMkD,cAAA,CAAe;UAChD8G,SAAA,EAAWA,CAAA,KAAMxJ,OAAA,CAAQ/D,YAAA,CAAa,KAAK;UAE3CJ,QAAA,iBAAAlB,GAAA,CAAC+N,cAAA;YACC5G,IAAA,EAAK;YACL2H,EAAA,EAAIzJ,OAAA,CAAQnB,SAAA;YACZ,cAAYmB,OAAA,CAAQlE,IAAA,GAAO,SAAS;YACpCQ,GAAA,EAAK0D,OAAA,CAAQ1D,GAAA;YACboN,aAAA,EAAgBlK,KAAA,IAAUA,KAAA,CAAMkD,cAAA,CAAe;YAC9C,GAAGkD,YAAA;YACH,GAAGiD,kBAAA;YACJc,QAAA,EAAUA,CAAA,KAAMpD,eAAA,CAAgB,IAAI;YACpCvE,GAAA,EAAK9B,YAAA;YACLoD,KAAA,EAAO;cAAA;cAELsG,OAAA,EAAS;cACTC,aAAA,EAAe;cAAA;cAEfC,OAAA,EAAS;cACT,GAAGlE,YAAA,CAAatC;YAClB;YACAX,SAAA,EAAWvJ,oBAAA,CAAqBwM,YAAA,CAAajD,SAAA,EAAYnD,KAAA,IAAU;cACjE,MAAMqD,aAAA,GAAgBrD,KAAA,CAAMiD,OAAA,IAAWjD,KAAA,CAAMsD,MAAA,IAAUtD,KAAA,CAAMuD,OAAA;cAG7D,IAAIvD,KAAA,CAAMwD,GAAA,KAAQ,OAAOxD,KAAA,CAAMkD,cAAA,CAAe;cAE9C,IAAI,CAACG,aAAA,IAAiBrD,KAAA,CAAMwD,GAAA,CAAIC,MAAA,KAAW,GAAG3C,qBAAA,CAAsBd,KAAA,CAAMwD,GAAG;cAE7E,IAAI,CAAC,WAAW,aAAa,QAAQ,KAAK,EAAEE,QAAA,CAAS1D,KAAA,CAAMwD,GAAG,GAAG;gBAC/D,MAAM+G,KAAA,GAAQ5J,QAAA,CAAS,EAAEQ,MAAA,CAAQC,IAAA,IAAS,CAACA,IAAA,CAAKnE,QAAQ;gBACxD,IAAIuN,cAAA,GAAiBD,KAAA,CAAM1L,GAAA,CAAKuC,IAAA,IAASA,IAAA,CAAKoB,GAAA,CAAIb,OAAQ;gBAE1D,IAAI,CAAC,WAAW,KAAK,EAAE+B,QAAA,CAAS1D,KAAA,CAAMwD,GAAG,GAAG;kBAC1CgH,cAAA,GAAiBA,cAAA,CAAejD,KAAA,CAAM,EAAEkD,OAAA,CAAQ;gBAClD;gBACA,IAAI,CAAC,WAAW,WAAW,EAAE/G,QAAA,CAAS1D,KAAA,CAAMwD,GAAG,GAAG;kBAChD,MAAMkH,cAAA,GAAiB1K,KAAA,CAAMC,MAAA;kBAC7B,MAAM0K,YAAA,GAAeH,cAAA,CAAeI,OAAA,CAAQF,cAAc;kBAC1DF,cAAA,GAAiBA,cAAA,CAAejD,KAAA,CAAMoD,YAAA,GAAe,CAAC;gBACxD;gBAMA/B,UAAA,CAAW,MAAM1B,UAAA,CAAWsD,cAAc,CAAC;gBAE3CxK,KAAA,CAAMkD,cAAA,CAAe;cACvB;YACF,CAAC;UAAA,CACH;QAAA,CACF;MAAA,CACF;IAAA,CACF;EAAA,CACF;AAEJ,CACF;AAEAgC,iBAAA,CAAkBhF,WAAA,GAAcmF,iBAAA;AAMhC,IAAMwF,0BAAA,GAA6B;AAKnC,IAAMzB,yBAAA,GAAkC3P,KAAA,CAAA4G,UAAA,CAGtC,CAAClE,KAAA,EAAoDmE,YAAA,KAAiB;EACtE,MAAM;IAAElE,aAAA;IAAe+N,QAAA;IAAU,GAAGW;EAAY,IAAI3O,KAAA;EACpD,MAAMqE,OAAA,GAAUzE,gBAAA,CAAiB0I,YAAA,EAAcrI,aAAa;EAC5D,MAAM2O,cAAA,GAAiB3F,uBAAA,CAAwBX,YAAA,EAAcrI,aAAa;EAC1E,MAAM,CAAC4O,cAAA,EAAgBC,iBAAiB,IAAUxR,KAAA,CAAA8D,QAAA,CAAgC,IAAI;EACtF,MAAM,CAAC8I,OAAA,EAASC,UAAU,IAAU7M,KAAA,CAAA8D,QAAA,CAAkD,IAAI;EAC1F,MAAMmD,YAAA,GAAe5G,eAAA,CAAgBwG,YAAA,EAAemG,IAAA,IAASH,UAAA,CAAWG,IAAI,CAAC;EAC7E,MAAM9F,QAAA,GAAWlF,aAAA,CAAcW,aAAa;EAC5C,MAAM8O,uBAAA,GAAgCzR,KAAA,CAAA2E,MAAA,CAAO,KAAK;EAClD,MAAM+M,mBAAA,GAA4B1R,KAAA,CAAA2E,MAAA,CAAO,IAAI;EAE7C,MAAM;IAAEmI,QAAA;IAAUG,YAAA;IAAcE,gBAAA;IAAkBoB;EAAkB,IAAI+C,cAAA;EACxE,MAAMzF,QAAA,GAAiB7L,KAAA,CAAA+F,WAAA,CAAY,MAAM;IACvC,IACEgB,OAAA,CAAQnD,OAAA,IACRmD,OAAA,CAAQhD,SAAA,IACRwN,cAAA,IACA3E,OAAA,IACAE,QAAA,IACAG,YAAA,IACAE,gBAAA,EACA;MACA,MAAMwE,WAAA,GAAc5K,OAAA,CAAQnD,OAAA,CAAQgO,qBAAA,CAAsB;MAK1D,MAAMC,WAAA,GAAcjF,OAAA,CAAQgF,qBAAA,CAAsB;MAClD,MAAME,aAAA,GAAgB/K,OAAA,CAAQhD,SAAA,CAAU6N,qBAAA,CAAsB;MAC9D,MAAMG,YAAA,GAAe5E,gBAAA,CAAiByE,qBAAA,CAAsB;MAE5D,IAAI7K,OAAA,CAAQ1D,GAAA,KAAQ,OAAO;QACzB,MAAM2O,cAAA,GAAiBD,YAAA,CAAaE,IAAA,GAAOJ,WAAA,CAAYI,IAAA;QACvD,MAAMA,IAAA,GAAOH,aAAA,CAAcG,IAAA,GAAOD,cAAA;QAClC,MAAME,SAAA,GAAYP,WAAA,CAAYM,IAAA,GAAOA,IAAA;QACrC,MAAME,eAAA,GAAkBR,WAAA,CAAYS,KAAA,GAAQF,SAAA;QAC5C,MAAMG,YAAA,GAAejK,IAAA,CAAKkK,GAAA,CAAIH,eAAA,EAAiBN,WAAA,CAAYO,KAAK;QAChE,MAAMG,SAAA,GAAYrD,MAAA,CAAOsD,UAAA,GAAa9G,cAAA;QACtC,MAAM+G,WAAA,GAAcvS,KAAA,CAAM+R,IAAA,EAAM,CAC9BvG,cAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAMAtD,IAAA,CAAKkK,GAAA,CAAI5G,cAAA,EAAgB6G,SAAA,GAAYF,YAAY,EAClD;QAEDd,cAAA,CAAelH,KAAA,CAAMqI,QAAA,GAAWP,eAAA,GAAkB;QAClDZ,cAAA,CAAelH,KAAA,CAAM4H,IAAA,GAAOQ,WAAA,GAAc;MAC5C,OAAO;QACL,MAAMT,cAAA,GAAiBH,WAAA,CAAYc,KAAA,GAAQZ,YAAA,CAAaY,KAAA;QACxD,MAAMA,KAAA,GAAQzD,MAAA,CAAOsD,UAAA,GAAaV,aAAA,CAAca,KAAA,GAAQX,cAAA;QACxD,MAAMY,UAAA,GAAa1D,MAAA,CAAOsD,UAAA,GAAab,WAAA,CAAYgB,KAAA,GAAQA,KAAA;QAC3D,MAAMR,eAAA,GAAkBR,WAAA,CAAYS,KAAA,GAAQQ,UAAA;QAC5C,MAAMP,YAAA,GAAejK,IAAA,CAAKkK,GAAA,CAAIH,eAAA,EAAiBN,WAAA,CAAYO,KAAK;QAChE,MAAMS,QAAA,GAAW3D,MAAA,CAAOsD,UAAA,GAAa9G,cAAA;QACrC,MAAMoH,YAAA,GAAe5S,KAAA,CAAMyS,KAAA,EAAO,CAChCjH,cAAA,EACAtD,IAAA,CAAKkK,GAAA,CAAI5G,cAAA,EAAgBmH,QAAA,GAAWR,YAAY,EACjD;QAEDd,cAAA,CAAelH,KAAA,CAAMqI,QAAA,GAAWP,eAAA,GAAkB;QAClDZ,cAAA,CAAelH,KAAA,CAAMsI,KAAA,GAAQG,YAAA,GAAe;MAC9C;MAKA,MAAMhC,KAAA,GAAQ5J,QAAA,CAAS;MACvB,MAAM6L,eAAA,GAAkB7D,MAAA,CAAO8D,WAAA,GAActH,cAAA,GAAiB;MAC9D,MAAMuH,WAAA,GAAcnG,QAAA,CAASwB,YAAA;MAE7B,MAAM4E,aAAA,GAAgBhE,MAAA,CAAOiE,gBAAA,CAAiBvG,OAAO;MACrD,MAAMwG,qBAAA,GAAwBC,QAAA,CAASH,aAAA,CAAcI,cAAA,EAAgB,EAAE;MACvE,MAAMC,iBAAA,GAAoBF,QAAA,CAASH,aAAA,CAAcM,UAAA,EAAY,EAAE;MAC/D,MAAMC,wBAAA,GAA2BJ,QAAA,CAASH,aAAA,CAAcQ,iBAAA,EAAmB,EAAE;MAC7E,MAAMC,oBAAA,GAAuBN,QAAA,CAASH,aAAA,CAAcU,aAAA,EAAe,EAAE;MACrE,MAAMC,iBAAA,GAAoBT,qBAAA,GAAwBG,iBAAA,GAAoBN,WAAA,GAAcU,oBAAA,GAAuBF,wBAAA;MAC3G,MAAMK,gBAAA,GAAmB1L,IAAA,CAAK2L,GAAA,CAAI9G,YAAA,CAAa+G,YAAA,GAAe,GAAGH,iBAAiB;MAElF,MAAMI,cAAA,GAAiB/E,MAAA,CAAOiE,gBAAA,CAAiBrG,QAAQ;MACvD,MAAMoH,kBAAA,GAAqBb,QAAA,CAASY,cAAA,CAAeT,UAAA,EAAY,EAAE;MACjE,MAAMW,qBAAA,GAAwBd,QAAA,CAASY,cAAA,CAAeL,aAAA,EAAe,EAAE;MAEvE,MAAMQ,sBAAA,GAAyBzC,WAAA,CAAY0C,GAAA,GAAM1C,WAAA,CAAY2C,MAAA,GAAS,IAAI5I,cAAA;MAC1E,MAAM6I,yBAAA,GAA4BxB,eAAA,GAAkBqB,sBAAA;MAEpD,MAAMI,sBAAA,GAAyBvH,YAAA,CAAa+G,YAAA,GAAe;MAC3D,MAAMS,gBAAA,GAAmBxH,YAAA,CAAayH,SAAA,GAAYF,sBAAA;MAClD,MAAMG,sBAAA,GAAyBvB,qBAAA,GAAwBG,iBAAA,GAAoBkB,gBAAA;MAC3E,MAAMG,yBAAA,GAA4Bf,iBAAA,GAAoBc,sBAAA;MAEtD,MAAME,2BAAA,GAA8BF,sBAAA,IAA0BP,sBAAA;MAE9D,IAAIS,2BAAA,EAA6B;QAC/B,MAAMC,UAAA,GACJhE,KAAA,CAAM9G,MAAA,GAAS,KAAKiD,YAAA,KAAiB6D,KAAA,CAAMA,KAAA,CAAM9G,MAAA,GAAS,CAAC,EAAGjB,GAAA,CAAIb,OAAA;QACpEqJ,cAAA,CAAelH,KAAA,CAAM0K,MAAA,GAAS;QAC9B,MAAMC,oBAAA,GACJpI,OAAA,CAAQqI,YAAA,GAAenI,QAAA,CAAS4H,SAAA,GAAY5H,QAAA,CAASkH,YAAA;QACvD,MAAMkB,gCAAA,GAAmC9M,IAAA,CAAKkK,GAAA,CAC5CiC,yBAAA,EACAC,sBAAA;QAAA;QAEGM,UAAA,GAAaX,qBAAA,GAAwB,KACtCa,oBAAA,GACAvB,wBACJ;QACA,MAAMa,MAAA,GAASK,sBAAA,GAAyBO,gCAAA;QACxC3D,cAAA,CAAelH,KAAA,CAAMiK,MAAA,GAASA,MAAA,GAAS;MACzC,OAAO;QACL,MAAMa,WAAA,GAAcrE,KAAA,CAAM9G,MAAA,GAAS,KAAKiD,YAAA,KAAiB6D,KAAA,CAAM,CAAC,EAAG/H,GAAA,CAAIb,OAAA;QACvEqJ,cAAA,CAAelH,KAAA,CAAMgK,GAAA,GAAM;QAC3B,MAAMe,6BAAA,GAAgChN,IAAA,CAAKkK,GAAA,CACzC8B,sBAAA,EACAhB,qBAAA,GACEtG,QAAA,CAAS4H,SAAA;QAAA;QAERS,WAAA,GAAcjB,kBAAA,GAAqB,KACpCM,sBACJ;QACA,MAAMF,MAAA,GAASc,6BAAA,GAAgCR,yBAAA;QAC/CrD,cAAA,CAAelH,KAAA,CAAMiK,MAAA,GAASA,MAAA,GAAS;QACvCxH,QAAA,CAASuB,SAAA,GAAYsG,sBAAA,GAAyBP,sBAAA,GAAyBtH,QAAA,CAAS4H,SAAA;MAClF;MAEAnD,cAAA,CAAelH,KAAA,CAAMgL,MAAA,GAAS,GAAG3J,cAAc;MAC/C6F,cAAA,CAAelH,KAAA,CAAMiL,SAAA,GAAYxB,gBAAA,GAAmB;MACpDvC,cAAA,CAAelH,KAAA,CAAMkL,SAAA,GAAYxC,eAAA,GAAkB;MAGnDrC,QAAA,GAAW;MAIX8E,qBAAA,CAAsB,MAAO/D,uBAAA,CAAwBvJ,OAAA,GAAU,IAAK;IACtE;EACF,GAAG,CACDhB,QAAA,EACAH,OAAA,CAAQnD,OAAA,EACRmD,OAAA,CAAQhD,SAAA,EACRwN,cAAA,EACA3E,OAAA,EACAE,QAAA,EACAG,YAAA,EACAE,gBAAA,EACApG,OAAA,CAAQ1D,GAAA,EACRqN,QAAA,CACD;EAEDtP,eAAA,CAAgB,MAAMyK,QAAA,CAAS,GAAG,CAACA,QAAQ,CAAC;EAG5C,MAAM,CAAC4J,aAAA,EAAeC,gBAAgB,IAAU1V,KAAA,CAAA8D,QAAA,CAAiB;EACjE1C,eAAA,CAAgB,MAAM;IACpB,IAAIwL,OAAA,EAAS8I,gBAAA,CAAiBxG,MAAA,CAAOiE,gBAAA,CAAiBvG,OAAO,EAAE+I,MAAM;EACvE,GAAG,CAAC/I,OAAO,CAAC;EAMZ,MAAMgJ,wBAAA,GAAiC5V,KAAA,CAAA+F,WAAA,CACpCiH,IAAA,IAA+C;IAC9C,IAAIA,IAAA,IAAQ0E,mBAAA,CAAoBxJ,OAAA,KAAY,MAAM;MAChD2D,QAAA,CAAS;MACT0C,iBAAA,GAAoB;MACpBmD,mBAAA,CAAoBxJ,OAAA,GAAU;IAChC;EACF,GACA,CAAC2D,QAAA,EAAU0C,iBAAiB,CAC9B;EAEA,OACE,eAAA7M,GAAA,CAACmU,sBAAA;IACCrQ,KAAA,EAAO7C,aAAA;IACP4O,cAAA;IACAE,uBAAA;IACAqE,oBAAA,EAAsBF,wBAAA;IAEtBhT,QAAA,iBAAAlB,GAAA,CAAC;MACCqH,GAAA,EAAKyI,iBAAA;MACLnH,KAAA,EAAO;QACLsG,OAAA,EAAS;QACTC,aAAA,EAAe;QACf/E,QAAA,EAAU;QACV8J,MAAA,EAAQF;MACV;MAEA7S,QAAA,iBAAAlB,GAAA,CAACV,SAAA,CAAU+U,GAAA,EAAV;QACE,GAAG1E,WAAA;QACJtI,GAAA,EAAK9B,YAAA;QACLoD,KAAA,EAAO;UAAA;UAAA;UAGL2L,SAAA,EAAW;UAAA;UAEXT,SAAA,EAAW;UACX,GAAGlE,WAAA,CAAYhH;QACjB;MAAA,CACF;IAAA,CACF;EAAA,CACF;AAEJ,CAAC;AAEDsF,yBAAA,CAA0BlJ,WAAA,GAAc2K,0BAAA;AAMxC,IAAM6E,oBAAA,GAAuB;AAM7B,IAAMvG,oBAAA,GAA6B1P,KAAA,CAAA4G,UAAA,CAGjC,CAAClE,KAAA,EAA+CmE,YAAA,KAAiB;EACjE,MAAM;IACJlE,aAAA;IACAwJ,KAAA,GAAQ;IACRI,gBAAA,GAAmBb,cAAA;IACnB,GAAG2F;EACL,IAAI3O,KAAA;EACJ,MAAMiB,WAAA,GAAcvB,cAAA,CAAeO,aAAa;EAEhD,OACE,eAAAjB,GAAA,CAAiBd,eAAA,CAAAsV,OAAA,EAAhB;IACE,GAAGvS,WAAA;IACH,GAAG0N,WAAA;IACJtI,GAAA,EAAKlC,YAAA;IACLsF,KAAA;IACAI,gBAAA;IACAlC,KAAA,EAAO;MAAA;MAEL2L,SAAA,EAAW;MACX,GAAG3E,WAAA,CAAYhH,KAAA;MAAA;MAEf,GAAG;QACD,2CAA2C;QAC3C,0CAA0C;QAC1C,2CAA2C;QAC3C,gCAAgC;QAChC,iCAAiC;MACnC;IACF;EAAA,CACF;AAEJ,CAAC;AAEDqF,oBAAA,CAAqBjJ,WAAA,GAAcwP,oBAAA;AAYnC,IAAM,CAACJ,sBAAA,EAAwBM,wBAAwB,IACrDjU,mBAAA,CAAgD8I,YAAA,EAAc,CAAC,CAAC;AAElE,IAAMoL,aAAA,GAAgB;AAQtB,IAAMC,cAAA,GAAuBrW,KAAA,CAAA4G,UAAA,CAC3B,CAAClE,KAAA,EAAyCmE,YAAA,KAAiB;EACzD,MAAM;IAAElE,aAAA;IAAe2T,KAAA;IAAO,GAAGC;EAAc,IAAI7T,KAAA;EACnD,MAAM4O,cAAA,GAAiB3F,uBAAA,CAAwByK,aAAA,EAAezT,aAAa;EAC3E,MAAM6T,eAAA,GAAkBL,wBAAA,CAAyBC,aAAA,EAAezT,aAAa;EAC7E,MAAMsE,YAAA,GAAe5G,eAAA,CAAgBwG,YAAA,EAAcyK,cAAA,CAAezB,gBAAgB;EAClF,MAAM4G,gBAAA,GAAyBzW,KAAA,CAAA2E,MAAA,CAAO,CAAC;EACvC,OACE,eAAAhD,IAAA,CAAAF,QAAA;IAEEmB,QAAA,kBAAAlB,GAAA,CAAC;MACCgV,uBAAA,EAAyB;QACvBC,MAAA,EAAQ;MACV;MACAL;IAAA,CACF,GACA,eAAA5U,GAAA,CAACK,UAAA,CAAWyJ,IAAA,EAAX;MAAgBhG,KAAA,EAAO7C,aAAA;MACtBC,QAAA,iBAAAlB,GAAA,CAACV,SAAA,CAAU+U,GAAA,EAAV;QACC,8BAA2B;QAC3BlN,IAAA,EAAK;QACJ,GAAG0N,aAAA;QACJxN,GAAA,EAAK9B,YAAA;QACLoD,KAAA,EAAO;UAAA;UAAA;UAAA;UAILwB,QAAA,EAAU;UACV+K,IAAA,EAAM;UAAA;UAAA;UAAA;UAAA;UAKNC,QAAA,EAAU;UACV,GAAGN,aAAA,CAAclM;QACnB;QACAyM,QAAA,EAAU3W,oBAAA,CAAqBoW,aAAA,CAAcO,QAAA,EAAWvQ,KAAA,IAAU;UAChE,MAAMuG,QAAA,GAAWvG,KAAA,CAAM0C,aAAA;UACvB,MAAM;YAAEsI,cAAA;YAAgBE;UAAwB,IAAI+E,eAAA;UACpD,IAAI/E,uBAAA,EAAyBvJ,OAAA,IAAWqJ,cAAA,EAAgB;YACtD,MAAMwF,UAAA,GAAa3O,IAAA,CAAKsG,GAAA,CAAI+H,gBAAA,CAAiBvO,OAAA,GAAU4E,QAAA,CAASuB,SAAS;YACzE,IAAI0I,UAAA,GAAa,GAAG;cAClB,MAAMhE,eAAA,GAAkB7D,MAAA,CAAO8D,WAAA,GAActH,cAAA,GAAiB;cAC9D,MAAMsL,YAAA,GAAeC,UAAA,CAAW1F,cAAA,CAAelH,KAAA,CAAMiL,SAAS;cAC9D,MAAM4B,SAAA,GAAYD,UAAA,CAAW1F,cAAA,CAAelH,KAAA,CAAMiK,MAAM;cACxD,MAAM6C,UAAA,GAAa/O,IAAA,CAAKkK,GAAA,CAAI0E,YAAA,EAAcE,SAAS;cAEnD,IAAIC,UAAA,GAAapE,eAAA,EAAiB;gBAChC,MAAMqE,UAAA,GAAaD,UAAA,GAAaJ,UAAA;gBAChC,MAAMM,iBAAA,GAAoBjP,IAAA,CAAK2L,GAAA,CAAIhB,eAAA,EAAiBqE,UAAU;gBAC9D,MAAME,UAAA,GAAaF,UAAA,GAAaC,iBAAA;gBAEhC9F,cAAA,CAAelH,KAAA,CAAMiK,MAAA,GAAS+C,iBAAA,GAAoB;gBAClD,IAAI9F,cAAA,CAAelH,KAAA,CAAM0K,MAAA,KAAW,OAAO;kBACzCjI,QAAA,CAASuB,SAAA,GAAYiJ,UAAA,GAAa,IAAIA,UAAA,GAAa;kBAEnD/F,cAAA,CAAelH,KAAA,CAAMkN,cAAA,GAAiB;gBACxC;cACF;YACF;UACF;UACAd,gBAAA,CAAiBvO,OAAA,GAAU4E,QAAA,CAASuB,SAAA;QACtC,CAAC;MAAA,CACH;IAAA,CACF;EAAA,CACF;AAEJ,CACF;AAEAgI,cAAA,CAAe5P,WAAA,GAAc2P,aAAA;AAM7B,IAAMoB,UAAA,GAAa;AAInB,IAAM,CAACC,0BAAA,EAA4BC,qBAAqB,IACtDxV,mBAAA,CAA6CsV,UAAU;AAKzD,IAAMG,WAAA,GAAoB3X,KAAA,CAAA4G,UAAA,CACxB,CAAClE,KAAA,EAAsCmE,YAAA,KAAiB;EACtD,MAAM;IAAElE,aAAA;IAAe,GAAGiV;EAAW,IAAIlV,KAAA;EACzC,MAAMmV,OAAA,GAAUlX,KAAA,CAAM;EACtB,OACE,eAAAe,GAAA,CAAC+V,0BAAA;IAA2BjS,KAAA,EAAO7C,aAAA;IAAe6N,EAAA,EAAIqH,OAAA;IACpDjV,QAAA,iBAAAlB,GAAA,CAACV,SAAA,CAAU+U,GAAA,EAAV;MAAclN,IAAA,EAAK;MAAQ,mBAAiBgP,OAAA;MAAU,GAAGD,UAAA;MAAY7O,GAAA,EAAKlC;IAAA,CAAc;EAAA,CAC3F;AAEJ,CACF;AAEA8Q,WAAA,CAAYlR,WAAA,GAAc+Q,UAAA;AAM1B,IAAMM,UAAA,GAAa;AAKnB,IAAMC,WAAA,GAAoB/X,KAAA,CAAA4G,UAAA,CACxB,CAAClE,KAAA,EAAsCmE,YAAA,KAAiB;EACtD,MAAM;IAAElE,aAAA;IAAe,GAAGqV;EAAW,IAAItV,KAAA;EACzC,MAAMuV,YAAA,GAAeP,qBAAA,CAAsBI,UAAA,EAAYnV,aAAa;EACpE,OAAO,eAAAjB,GAAA,CAACV,SAAA,CAAU+U,GAAA,EAAV;IAAcvF,EAAA,EAAIyH,YAAA,CAAazH,EAAA;IAAK,GAAGwH,UAAA;IAAYjP,GAAA,EAAKlC;EAAA,CAAc;AAChF,CACF;AAEAkR,WAAA,CAAYtR,WAAA,GAAcqR,UAAA;AAM1B,IAAMI,SAAA,GAAY;AAUlB,IAAM,CAACC,yBAAA,EAA2BC,oBAAoB,IACpDlW,mBAAA,CAA4CgW,SAAS;AASvD,IAAMG,UAAA,GAAmBrY,KAAA,CAAA4G,UAAA,CACvB,CAAClE,KAAA,EAAqCmE,YAAA,KAAiB;EACrD,MAAM;IACJlE,aAAA;IACAM,KAAA;IACAO,QAAA,GAAW;IACX8U,SAAA,EAAWC,aAAA;IACX,GAAGC;EACL,IAAI9V,KAAA;EACJ,MAAMqE,OAAA,GAAUzE,gBAAA,CAAiB4V,SAAA,EAAWvV,aAAa;EACzD,MAAM2O,cAAA,GAAiB3F,uBAAA,CAAwBuM,SAAA,EAAWvV,aAAa;EACvE,MAAM8V,UAAA,GAAa1R,OAAA,CAAQ9D,KAAA,KAAUA,KAAA;EACrC,MAAM,CAACqV,SAAA,EAAWI,YAAY,IAAU1Y,KAAA,CAAA8D,QAAA,CAASyU,aAAA,IAAiB,EAAE;EACpE,MAAM,CAACI,SAAA,EAAWC,YAAY,IAAU5Y,KAAA,CAAA8D,QAAA,CAAS,KAAK;EACtD,MAAMmD,YAAA,GAAe5G,eAAA,CAAgBwG,YAAA,EAAemG,IAAA,IAClDsE,cAAA,CAAelC,eAAA,GAAkBpC,IAAA,EAAM/J,KAAA,EAAOO,QAAQ,CACxD;EACA,MAAMqV,MAAA,GAASlY,KAAA,CAAM;EACrB,MAAMwG,cAAA,GAAuBnH,KAAA,CAAA2E,MAAA,CAA0C,OAAO;EAE9E,MAAMmU,YAAA,GAAeA,CAAA,KAAM;IACzB,IAAI,CAACtV,QAAA,EAAU;MACbuD,OAAA,CAAQ3D,aAAA,CAAcH,KAAK;MAC3B8D,OAAA,CAAQ/D,YAAA,CAAa,KAAK;IAC5B;EACF;EAEA,IAAIC,KAAA,KAAU,IAAI;IAChB,MAAM,IAAI8V,KAAA,CACR,uLACF;EACF;EAEA,OACE,eAAArX,GAAA,CAACyW,yBAAA;IACC3S,KAAA,EAAO7C,aAAA;IACPM,KAAA;IACAO,QAAA;IACAqV,MAAA;IACAJ,UAAA;IACAO,gBAAA,EAAwBhZ,KAAA,CAAA+F,WAAA,CAAaiH,IAAA,IAAS;MAC5C0L,YAAA,CAAcO,aAAA,IAAkBA,aAAA,KAAkBjM,IAAA,EAAMkM,WAAA,IAAe,IAAIC,IAAA,CAAK,CAAC;IACnF,GAAG,EAAE;IAELvW,QAAA,iBAAAlB,GAAA,CAACK,UAAA,CAAWqX,QAAA,EAAX;MACC5T,KAAA,EAAO7C,aAAA;MACPM,KAAA;MACAO,QAAA;MACA8U,SAAA;MAEA1V,QAAA,iBAAAlB,GAAA,CAACV,SAAA,CAAU+U,GAAA,EAAV;QACClN,IAAA,EAAK;QACL,mBAAiBgQ,MAAA;QACjB,oBAAkBF,SAAA,GAAY,KAAK;QAEnC,iBAAeF,UAAA,IAAcE,SAAA;QAC7B,cAAYF,UAAA,GAAa,YAAY;QACrC,iBAAejV,QAAA,IAAY;QAC3B,iBAAeA,QAAA,GAAW,KAAK;QAC/B8C,QAAA,EAAU9C,QAAA,GAAW,SAAY;QAChC,GAAGgV,SAAA;QACJzP,GAAA,EAAK9B,YAAA;QACLoS,OAAA,EAASlZ,oBAAA,CAAqBqY,SAAA,CAAUa,OAAA,EAAS,MAAMT,YAAA,CAAa,IAAI,CAAC;QACzEU,MAAA,EAAQnZ,oBAAA,CAAqBqY,SAAA,CAAUc,MAAA,EAAQ,MAAMV,YAAA,CAAa,KAAK,CAAC;QACxE5P,OAAA,EAAS7I,oBAAA,CAAqBqY,SAAA,CAAUxP,OAAA,EAAS,MAAM;UAErD,IAAI7B,cAAA,CAAee,OAAA,KAAY,SAAS4Q,YAAA,CAAa;QACvD,CAAC;QACDS,WAAA,EAAapZ,oBAAA,CAAqBqY,SAAA,CAAUe,WAAA,EAAa,MAAM;UAG7D,IAAIpS,cAAA,CAAee,OAAA,KAAY,SAAS4Q,YAAA,CAAa;QACvD,CAAC;QACD3P,aAAA,EAAehJ,oBAAA,CAAqBqY,SAAA,CAAUrP,aAAA,EAAgB5C,KAAA,IAAU;UACtEY,cAAA,CAAee,OAAA,GAAU3B,KAAA,CAAM6C,WAAA;QACjC,CAAC;QACDoQ,aAAA,EAAerZ,oBAAA,CAAqBqY,SAAA,CAAUgB,aAAA,EAAgBjT,KAAA,IAAU;UAEtEY,cAAA,CAAee,OAAA,GAAU3B,KAAA,CAAM6C,WAAA;UAC/B,IAAI5F,QAAA,EAAU;YACZ8N,cAAA,CAAexB,WAAA,GAAc;UAC/B,WAAW3I,cAAA,CAAee,OAAA,KAAY,SAAS;YAG7C3B,KAAA,CAAM0C,aAAA,CAAcC,KAAA,CAAM;cAAEkH,aAAA,EAAe;YAAK,CAAC;UACnD;QACF,CAAC;QACDqJ,cAAA,EAAgBtZ,oBAAA,CAAqBqY,SAAA,CAAUiB,cAAA,EAAiBlT,KAAA,IAAU;UACxE,IAAIA,KAAA,CAAM0C,aAAA,KAAkB+E,QAAA,CAASC,aAAA,EAAe;YAClDqD,cAAA,CAAexB,WAAA,GAAc;UAC/B;QACF,CAAC;QACDpG,SAAA,EAAWvJ,oBAAA,CAAqBqY,SAAA,CAAU9O,SAAA,EAAYnD,KAAA,IAAU;UAC9D,MAAMoD,aAAA,GAAgB2H,cAAA,CAAelK,SAAA,EAAWc,OAAA,KAAY;UAC5D,IAAIyB,aAAA,IAAiBpD,KAAA,CAAMwD,GAAA,KAAQ,KAAK;UACxC,IAAIlI,cAAA,CAAeoI,QAAA,CAAS1D,KAAA,CAAMwD,GAAG,GAAG+O,YAAA,CAAa;UAErD,IAAIvS,KAAA,CAAMwD,GAAA,KAAQ,KAAKxD,KAAA,CAAMkD,cAAA,CAAe;QAC9C,CAAC;MAAA,CACH;IAAA,CACF;EAAA,CACF;AAEJ,CACF;AAEA4O,UAAA,CAAW5R,WAAA,GAAcyR,SAAA;AAMzB,IAAMwB,cAAA,GAAiB;AAKvB,IAAMC,cAAA,GAAuB3Z,KAAA,CAAA4G,UAAA,CAC3B,CAAClE,KAAA,EAAyCmE,YAAA,KAAiB;EAEzD,MAAM;IAAElE,aAAA;IAAeyH,SAAA;IAAWC,KAAA;IAAO,GAAGuP;EAAc,IAAIlX,KAAA;EAC9D,MAAMqE,OAAA,GAAUzE,gBAAA,CAAiBoX,cAAA,EAAgB/W,aAAa;EAC9D,MAAM2O,cAAA,GAAiB3F,uBAAA,CAAwB+N,cAAA,EAAgB/W,aAAa;EAC5E,MAAMkX,WAAA,GAAczB,oBAAA,CAAqBsB,cAAA,EAAgB/W,aAAa;EACtE,MAAMmX,oBAAA,GAAuBtX,6BAAA,CAA8BkX,cAAA,EAAgB/W,aAAa;EACxF,MAAM,CAACoX,YAAA,EAAcC,eAAe,IAAUha,KAAA,CAAA8D,QAAA,CAAuC,IAAI;EACzF,MAAMmD,YAAA,GAAe5G,eAAA,CACnBwG,YAAA,EACCmG,IAAA,IAASgN,eAAA,CAAgBhN,IAAI,GAC9B6M,WAAA,CAAYb,gBAAA,EACXhM,IAAA,IAASsE,cAAA,CAAe9B,mBAAA,GAAsBxC,IAAA,EAAM6M,WAAA,CAAY5W,KAAA,EAAO4W,WAAA,CAAYrW,QAAQ,CAC9F;EAEA,MAAM0V,WAAA,GAAca,YAAA,EAAcb,WAAA;EAClC,MAAMe,YAAA,GAAqBja,KAAA,CAAAka,OAAA,CACzB,MACE,eAAAxY,GAAA,CAAC;IAA+BuB,KAAA,EAAO4W,WAAA,CAAY5W,KAAA;IAAOO,QAAA,EAAUqW,WAAA,CAAYrW,QAAA;IAC7EZ,QAAA,EAAAsW;EAAA,GADUW,WAAA,CAAY5W,KAEzB,GAEF,CAAC4W,WAAA,CAAYrW,QAAA,EAAUqW,WAAA,CAAY5W,KAAA,EAAOiW,WAAW,CACvD;EAEA,MAAM;IAAEpT,iBAAA;IAAmBI;EAAqB,IAAI4T,oBAAA;EACpD1Y,eAAA,CAAgB,MAAM;IACpB0E,iBAAA,CAAkBmU,YAAY;IAC9B,OAAO,MAAM/T,oBAAA,CAAqB+T,YAAY;EAChD,GAAG,CAACnU,iBAAA,EAAmBI,oBAAA,EAAsB+T,YAAY,CAAC;EAE1D,OACE,eAAAtY,IAAA,CAAAF,QAAA;IACEmB,QAAA,kBAAAlB,GAAA,CAACV,SAAA,CAAUyJ,IAAA,EAAV;MAAe+F,EAAA,EAAIqJ,WAAA,CAAYhB,MAAA;MAAS,GAAGe,aAAA;MAAe7Q,GAAA,EAAK9B;IAAA,CAAc,GAG7E4S,WAAA,CAAYpB,UAAA,IAAc1R,OAAA,CAAQhD,SAAA,IAAa,CAACgD,OAAA,CAAQ9C,oBAAA,GAC5ChE,QAAA,CAAAqL,YAAA,CAAasO,aAAA,CAAchX,QAAA,EAAUmE,OAAA,CAAQhD,SAAS,IAC/D;EAAA,CACN;AAEJ,CACF;AAEA4V,cAAA,CAAelT,WAAA,GAAciT,cAAA;AAM7B,IAAMS,mBAAA,GAAsB;AAK5B,IAAMC,mBAAA,GAA4Bpa,KAAA,CAAA4G,UAAA,CAChC,CAAClE,KAAA,EAA8CmE,YAAA,KAAiB;EAC9D,MAAM;IAAElE,aAAA;IAAe,GAAG0X;EAAmB,IAAI3X,KAAA;EACjD,MAAMmX,WAAA,GAAczB,oBAAA,CAAqB+B,mBAAA,EAAqBxX,aAAa;EAC3E,OAAOkX,WAAA,CAAYpB,UAAA,GACjB,eAAA/W,GAAA,CAACV,SAAA,CAAUyJ,IAAA,EAAV;IAAe,eAAW;IAAE,GAAG4P,kBAAA;IAAoBtR,GAAA,EAAKlC;EAAA,CAAc,IACrE;AACN,CACF;AAEAuT,mBAAA,CAAoB3T,WAAA,GAAc0T,mBAAA;AAMlC,IAAMG,qBAAA,GAAwB;AAK9B,IAAMC,oBAAA,GAA6Bva,KAAA,CAAA4G,UAAA,CAGjC,CAAClE,KAAA,EAA+CmE,YAAA,KAAiB;EACjE,MAAMyK,cAAA,GAAiB3F,uBAAA,CAAwB2O,qBAAA,EAAuB5X,KAAA,CAAMC,aAAa;EACzF,MAAM6T,eAAA,GAAkBL,wBAAA,CAAyBmE,qBAAA,EAAuB5X,KAAA,CAAMC,aAAa;EAC3F,MAAM,CAAC6X,WAAA,EAAaC,cAAc,IAAUza,KAAA,CAAA8D,QAAA,CAAS,KAAK;EAC1D,MAAMmD,YAAA,GAAe5G,eAAA,CAAgBwG,YAAA,EAAc2P,eAAA,CAAgBV,oBAAoB;EAEvF1U,eAAA,CAAgB,MAAM;IACpB,IAAIkQ,cAAA,CAAexE,QAAA,IAAYwE,cAAA,CAAejE,YAAA,EAAc;MAE1D,IAASqN,aAAA,GAAT,SAAAC,CAAA,EAAwB;QACtB,MAAMC,YAAA,GAAc9N,QAAA,CAASuB,SAAA,GAAY;QACzCoM,cAAA,CAAeG,YAAW;MAC5B;MAHS,IAAAD,YAAA,GAAAD,aAAA;MADT,MAAM5N,QAAA,GAAWwE,cAAA,CAAexE,QAAA;MAKhC4N,aAAA,CAAa;MACb5N,QAAA,CAASgC,gBAAA,CAAiB,UAAU4L,aAAY;MAChD,OAAO,MAAM5N,QAAA,CAAS+B,mBAAA,CAAoB,UAAU6L,aAAY;IAClE;EACF,GAAG,CAACpJ,cAAA,CAAexE,QAAA,EAAUwE,cAAA,CAAejE,YAAY,CAAC;EAEzD,OAAOmN,WAAA,GACL,eAAA9Y,GAAA,CAACmZ,sBAAA;IACE,GAAGnY,KAAA;IACJqG,GAAA,EAAK9B,YAAA;IACL6T,YAAA,EAAcA,CAAA,KAAM;MAClB,MAAM;QAAEhO,QAAA;QAAUG;MAAa,IAAIqE,cAAA;MACnC,IAAIxE,QAAA,IAAYG,YAAA,EAAc;QAC5BH,QAAA,CAASuB,SAAA,GAAYvB,QAAA,CAASuB,SAAA,GAAYpB,YAAA,CAAa+G,YAAA;MACzD;IACF;EAAA,CACF,IACE;AACN,CAAC;AAEDuG,oBAAA,CAAqB9T,WAAA,GAAc6T,qBAAA;AAMnC,IAAMS,uBAAA,GAA0B;AAKhC,IAAMC,sBAAA,GAA+Bhb,KAAA,CAAA4G,UAAA,CAGnC,CAAClE,KAAA,EAAiDmE,YAAA,KAAiB;EACnE,MAAMyK,cAAA,GAAiB3F,uBAAA,CAAwBoP,uBAAA,EAAyBrY,KAAA,CAAMC,aAAa;EAC3F,MAAM6T,eAAA,GAAkBL,wBAAA,CAAyB4E,uBAAA,EAAyBrY,KAAA,CAAMC,aAAa;EAC7F,MAAM,CAACsY,aAAA,EAAeC,gBAAgB,IAAUlb,KAAA,CAAA8D,QAAA,CAAS,KAAK;EAC9D,MAAMmD,YAAA,GAAe5G,eAAA,CAAgBwG,YAAA,EAAc2P,eAAA,CAAgBV,oBAAoB;EAEvF1U,eAAA,CAAgB,MAAM;IACpB,IAAIkQ,cAAA,CAAexE,QAAA,IAAYwE,cAAA,CAAejE,YAAA,EAAc;MAE1D,IAASqN,aAAA,GAAT,SAAAC,CAAA,EAAwB;QACtB,MAAMQ,SAAA,GAAYrO,QAAA,CAASwB,YAAA,GAAexB,QAAA,CAASmI,YAAA;QAGnD,MAAMmG,cAAA,GAAgBhT,IAAA,CAAKiT,IAAA,CAAKvO,QAAA,CAASuB,SAAS,IAAI8M,SAAA;QACtDD,gBAAA,CAAiBE,cAAa;MAChC;MANS,IAAAT,YAAA,GAAAD,aAAA;MADT,MAAM5N,QAAA,GAAWwE,cAAA,CAAexE,QAAA;MAQhC4N,aAAA,CAAa;MACb5N,QAAA,CAASgC,gBAAA,CAAiB,UAAU4L,aAAY;MAChD,OAAO,MAAM5N,QAAA,CAAS+B,mBAAA,CAAoB,UAAU6L,aAAY;IAClE;EACF,GAAG,CAACpJ,cAAA,CAAexE,QAAA,EAAUwE,cAAA,CAAejE,YAAY,CAAC;EAEzD,OAAO4N,aAAA,GACL,eAAAvZ,GAAA,CAACmZ,sBAAA;IACE,GAAGnY,KAAA;IACJqG,GAAA,EAAK9B,YAAA;IACL6T,YAAA,EAAcA,CAAA,KAAM;MAClB,MAAM;QAAEhO,QAAA;QAAUG;MAAa,IAAIqE,cAAA;MACnC,IAAIxE,QAAA,IAAYG,YAAA,EAAc;QAC5BH,QAAA,CAASuB,SAAA,GAAYvB,QAAA,CAASuB,SAAA,GAAYpB,YAAA,CAAa+G,YAAA;MACzD;IACF;EAAA,CACF,IACE;AACN,CAAC;AAEDgH,sBAAA,CAAuBvU,WAAA,GAAcsU,uBAAA;AAOrC,IAAMF,sBAAA,GAA+B7a,KAAA,CAAA4G,UAAA,CAGnC,CAAClE,KAAA,EAAiDmE,YAAA,KAAiB;EACnE,MAAM;IAAElE,aAAA;IAAemY,YAAA;IAAc,GAAGQ;EAAqB,IAAI5Y,KAAA;EACjE,MAAM4O,cAAA,GAAiB3F,uBAAA,CAAwB,sBAAsBhJ,aAAa;EAClF,MAAM4Y,kBAAA,GAA2Bvb,KAAA,CAAA2E,MAAA,CAAsB,IAAI;EAC3D,MAAMuC,QAAA,GAAWlF,aAAA,CAAcW,aAAa;EAE5C,MAAM6Y,oBAAA,GAA6Bxb,KAAA,CAAA+F,WAAA,CAAY,MAAM;IACnD,IAAIwV,kBAAA,CAAmBrT,OAAA,KAAY,MAAM;MACvCgH,MAAA,CAAOuM,aAAA,CAAcF,kBAAA,CAAmBrT,OAAO;MAC/CqT,kBAAA,CAAmBrT,OAAA,GAAU;IAC/B;EACF,GAAG,EAAE;EAEClI,KAAA,CAAAwN,SAAA,CAAU,MAAM;IACpB,OAAO,MAAMgO,oBAAA,CAAqB;EACpC,GAAG,CAACA,oBAAoB,CAAC;EAMzBpa,eAAA,CAAgB,MAAM;IACpB,MAAMsa,UAAA,GAAaxU,QAAA,CAAS,EAAEW,IAAA,CAAMF,IAAA,IAASA,IAAA,CAAKoB,GAAA,CAAIb,OAAA,KAAY8F,QAAA,CAASC,aAAa;IACxFyN,UAAA,EAAY3S,GAAA,CAAIb,OAAA,EAASiG,cAAA,CAAe;MAAEC,KAAA,EAAO;IAAU,CAAC;EAC9D,GAAG,CAAClH,QAAQ,CAAC;EAEb,OACE,eAAAxF,GAAA,CAACV,SAAA,CAAU+U,GAAA,EAAV;IACC,eAAW;IACV,GAAGuF,oBAAA;IACJvS,GAAA,EAAKlC,YAAA;IACLwD,KAAA,EAAO;MAAEsR,UAAA,EAAY;MAAG,GAAGL,oBAAA,CAAqBjR;IAAM;IACtDlB,aAAA,EAAehJ,oBAAA,CAAqBmb,oBAAA,CAAqBnS,aAAA,EAAe,MAAM;MAC5E,IAAIoS,kBAAA,CAAmBrT,OAAA,KAAY,MAAM;QACvCqT,kBAAA,CAAmBrT,OAAA,GAAUgH,MAAA,CAAO0M,WAAA,CAAYd,YAAA,EAAc,EAAE;MAClE;IACF,CAAC;IACDtB,aAAA,EAAerZ,oBAAA,CAAqBmb,oBAAA,CAAqB9B,aAAA,EAAe,MAAM;MAC5ElI,cAAA,CAAexB,WAAA,GAAc;MAC7B,IAAIyL,kBAAA,CAAmBrT,OAAA,KAAY,MAAM;QACvCqT,kBAAA,CAAmBrT,OAAA,GAAUgH,MAAA,CAAO0M,WAAA,CAAYd,YAAA,EAAc,EAAE;MAClE;IACF,CAAC;IACDrB,cAAA,EAAgBtZ,oBAAA,CAAqBmb,oBAAA,CAAqB7B,cAAA,EAAgB,MAAM;MAC9E+B,oBAAA,CAAqB;IACvB,CAAC;EAAA,CACH;AAEJ,CAAC;AAMD,IAAMK,cAAA,GAAiB;AAKvB,IAAMC,eAAA,GAAwB9b,KAAA,CAAA4G,UAAA,CAC5B,CAAClE,KAAA,EAA0CmE,YAAA,KAAiB;EAC1D,MAAM;IAAElE,aAAA;IAAe,GAAGoZ;EAAe,IAAIrZ,KAAA;EAC7C,OAAO,eAAAhB,GAAA,CAACV,SAAA,CAAU+U,GAAA,EAAV;IAAc,eAAW;IAAE,GAAGgG,cAAA;IAAgBhT,GAAA,EAAKlC;EAAA,CAAc;AAC3E,CACF;AAEAiV,eAAA,CAAgBrV,WAAA,GAAcoV,cAAA;AAM9B,IAAMG,UAAA,GAAa;AAMnB,IAAMC,WAAA,GAAoBjc,KAAA,CAAA4G,UAAA,CACxB,CAAClE,KAAA,EAAsCmE,YAAA,KAAiB;EACtD,MAAM;IAAElE,aAAA;IAAe,GAAGuZ;EAAW,IAAIxZ,KAAA;EACzC,MAAMiB,WAAA,GAAcvB,cAAA,CAAeO,aAAa;EAChD,MAAMoE,OAAA,GAAUzE,gBAAA,CAAiB0Z,UAAA,EAAYrZ,aAAa;EAC1D,MAAM2O,cAAA,GAAiB3F,uBAAA,CAAwBqQ,UAAA,EAAYrZ,aAAa;EACxE,OAAOoE,OAAA,CAAQlE,IAAA,IAAQyO,cAAA,CAAezF,QAAA,KAAa,WACjD,eAAAnK,GAAA,CAAiBd,eAAA,CAAAub,KAAA,EAAhB;IAAuB,GAAGxY,WAAA;IAAc,GAAGuY,UAAA;IAAYnT,GAAA,EAAKlC;EAAA,CAAc,IACzE;AACN,CACF;AAEAoV,WAAA,CAAYxV,WAAA,GAAcuV,UAAA;AAM1B,IAAMI,iBAAA,GAAoB;AAK1B,IAAM/V,iBAAA,GAA0BrG,KAAA,CAAA4G,UAAA,CAC9B,CAAC;EAAEjE,aAAA;EAAeM,KAAA;EAAO,GAAGP;AAAM,GAAwCmE,YAAA,KAAiB;EACzF,MAAMkC,GAAA,GAAY/I,KAAA,CAAA2E,MAAA,CAA0B,IAAI;EAChD,MAAMsC,YAAA,GAAe5G,eAAA,CAAgBwG,YAAA,EAAckC,GAAG;EACtD,MAAMsT,SAAA,GAAYhb,WAAA,CAAY4B,KAAK;EAG7BjD,KAAA,CAAAwN,SAAA,CAAU,MAAM;IACpB,MAAM8O,MAAA,GAASvT,GAAA,CAAIb,OAAA;IACnB,IAAI,CAACoU,MAAA,EAAQ;IAEb,MAAMC,WAAA,GAAcrN,MAAA,CAAOsN,iBAAA,CAAkBC,SAAA;IAC7C,MAAMC,UAAA,GAAaC,MAAA,CAAOC,wBAAA,CACxBL,WAAA,EACA,OACF;IACA,MAAM9X,QAAA,GAAWiY,UAAA,CAAWG,GAAA;IAC5B,IAAIR,SAAA,KAAcpZ,KAAA,IAASwB,QAAA,EAAU;MACnC,MAAM8B,KAAA,GAAQ,IAAIuW,KAAA,CAAM,UAAU;QAAEC,OAAA,EAAS;MAAK,CAAC;MACnDtY,QAAA,CAASuY,IAAA,CAAKV,MAAA,EAAQrZ,KAAK;MAC3BqZ,MAAA,CAAOW,aAAA,CAAc1W,KAAK;IAC5B;EACF,GAAG,CAAC8V,SAAA,EAAWpZ,KAAK,CAAC;EAcrB,OACE,eAAAvB,GAAA,CAACV,SAAA,CAAUsb,MAAA,EAAV;IACE,GAAG5Z,KAAA;IACJ2H,KAAA,EAAO;MAAE,GAAG/I,sBAAA;MAAwB,GAAGoB,KAAA,CAAM2H;IAAM;IACnDtB,GAAA,EAAK9B,YAAA;IACL9D,YAAA,EAAcF;EAAA,CAChB;AAEJ,CACF;AAEAoD,iBAAA,CAAkBI,WAAA,GAAc2V,iBAAA;AAIhC,SAAStT,sBAAsB7F,KAAA,EAAgB;EAC7C,OAAOA,KAAA,KAAU,MAAMA,KAAA,KAAU;AACnC;AAEA,SAASsE,mBAAmB2V,cAAA,EAA0C;EACpE,MAAMC,kBAAA,GAAqBjc,cAAA,CAAegc,cAAc;EACxD,MAAM9V,SAAA,GAAkBpH,KAAA,CAAA2E,MAAA,CAAO,EAAE;EACjC,MAAMyY,QAAA,GAAiBpd,KAAA,CAAA2E,MAAA,CAAO,CAAC;EAE/B,MAAM0C,qBAAA,GAA8BrH,KAAA,CAAA+F,WAAA,CACjCgE,GAAA,IAAgB;IACf,MAAMvC,MAAA,GAASJ,SAAA,CAAUc,OAAA,GAAU6B,GAAA;IACnCoT,kBAAA,CAAmB3V,MAAM;IAEzB,CAAC,SAAS6V,aAAapa,KAAA,EAAe;MACpCmE,SAAA,CAAUc,OAAA,GAAUjF,KAAA;MACpBiM,MAAA,CAAOoO,YAAA,CAAaF,QAAA,CAASlV,OAAO;MAEpC,IAAIjF,KAAA,KAAU,IAAIma,QAAA,CAASlV,OAAA,GAAUgH,MAAA,CAAOC,UAAA,CAAW,MAAMkO,YAAA,CAAa,EAAE,GAAG,GAAI;IACrF,GAAG7V,MAAM;EACX,GACA,CAAC2V,kBAAkB,CACrB;EAEA,MAAM7V,cAAA,GAAuBtH,KAAA,CAAA+F,WAAA,CAAY,MAAM;IAC7CqB,SAAA,CAAUc,OAAA,GAAU;IACpBgH,MAAA,CAAOoO,YAAA,CAAaF,QAAA,CAASlV,OAAO;EACtC,GAAG,EAAE;EAEClI,KAAA,CAAAwN,SAAA,CAAU,MAAM;IACpB,OAAO,MAAM0B,MAAA,CAAOoO,YAAA,CAAaF,QAAA,CAASlV,OAAO;EACnD,GAAG,EAAE;EAEL,OAAO,CAACd,SAAA,EAAWC,qBAAA,EAAuBC,cAAc;AAC1D;AAmBA,SAASS,aACP+I,KAAA,EACAtJ,MAAA,EACAI,WAAA,EACA;EACA,MAAM2V,UAAA,GAAa/V,MAAA,CAAOwC,MAAA,GAAS,KAAK9E,KAAA,CAAMC,IAAA,CAAKqC,MAAM,EAAEgW,KAAA,CAAOC,IAAA,IAASA,IAAA,KAASjW,MAAA,CAAO,CAAC,CAAC;EAC7F,MAAMkW,gBAAA,GAAmBH,UAAA,GAAa/V,MAAA,CAAO,CAAC,IAAKA,MAAA;EACnD,MAAMmW,gBAAA,GAAmB/V,WAAA,GAAckJ,KAAA,CAAMK,OAAA,CAAQvJ,WAAW,IAAI;EACpE,IAAIgW,YAAA,GAAeC,SAAA,CAAU/M,KAAA,EAAO1I,IAAA,CAAKkK,GAAA,CAAIqL,gBAAA,EAAkB,CAAC,CAAC;EACjE,MAAMG,kBAAA,GAAqBJ,gBAAA,CAAiB1T,MAAA,KAAW;EACvD,IAAI8T,kBAAA,EAAoBF,YAAA,GAAeA,YAAA,CAAalW,MAAA,CAAQqW,CAAA,IAAMA,CAAA,KAAMnW,WAAW;EACnF,MAAME,QAAA,GAAW8V,YAAA,CAAa/V,IAAA,CAAMF,IAAA,IAClCA,IAAA,CAAK2Q,SAAA,CAAU0F,WAAA,CAAY,EAAEC,UAAA,CAAWP,gBAAA,CAAiBM,WAAA,CAAY,CAAC,CACxE;EACA,OAAOlW,QAAA,KAAaF,WAAA,GAAcE,QAAA,GAAW;AAC/C;AAMA,SAAS+V,UAAaK,KAAA,EAAYC,UAAA,EAAoB;EACpD,OAAOD,KAAA,CAAM9Y,GAAA,CAAO,CAACgZ,CAAA,EAAGC,KAAA,KAAUH,KAAA,EAAOC,UAAA,GAAaE,KAAA,IAASH,KAAA,CAAMlU,MAAM,CAAE;AAC/E;AAEA,IAAMsU,KAAA,GAAO7b,MAAA;AACb,IAAM8b,OAAA,GAAU5X,aAAA;AAChB,IAAM6X,KAAA,GAAQrU,WAAA;AACd,IAAMsU,IAAA,GAAO7T,UAAA;AACb,IAAM9J,MAAA,GAASiK,YAAA;AACf,IAAM2T,QAAA,GAAUzT,aAAA;AAChB,IAAM0T,QAAA,GAAWtI,cAAA;AACjB,IAAMuI,KAAA,GAAQjH,WAAA;AACd,IAAMkH,KAAA,GAAQ9G,WAAA;AACd,IAAM+G,IAAA,GAAOzG,UAAA;AACb,IAAM0G,QAAA,GAAWpF,cAAA;AACjB,IAAMqF,aAAA,GAAgB5E,mBAAA;AACtB,IAAM6E,cAAA,GAAiB1E,oBAAA;AACvB,IAAM2E,gBAAA,GAAmBlE,sBAAA;AACzB,IAAMmE,SAAA,GAAYrD,eAAA;AAClB,IAAMsD,MAAA,GAAQnD,WAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}