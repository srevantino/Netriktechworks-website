{"ast":null,"code":"var _jsxFileName = \"D:\\\\important\\\\cursor\\\\netrik website\\\\Netrik-techworks-website\\\\frontend\\\\src\\\\components\\\\AdvancedParticleBackground.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdvancedParticleBackground = ({\n  theme = \"dark\"\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  const particlesRef = useRef([]);\n  const mouseRef = useRef({\n    x: 0,\n    y: 0\n  });\n  const [isDark, setIsDark] = useState(theme === \"dark\");\n\n  // Update isDark when theme prop changes\n  useEffect(() => {\n    console.log(\"Theme changed to:\", theme);\n    setIsDark(theme === \"dark\");\n  }, [theme]);\n\n  // Update particle colors when isDark changes\n  useEffect(() => {\n    if (particlesRef.current.length > 0) {\n      console.log(\"Updating particle colors, isDark:\", isDark);\n\n      // Define color schemes\n      const darkColors = {\n        star: \"#60a5fa\",\n        hexagon: \"#a78bfa\",\n        circle: \"#34d399\",\n        diamond: \"#fbbf24\",\n        default: \"#f472b6\"\n      };\n      const lightColors = {\n        star: \"#3b82f6\",\n        hexagon: \"#8b5cf6\",\n        circle: \"#10b981\",\n        diamond: \"#f59e0b\",\n        default: \"#ec4899\"\n      };\n      const colors = isDark ? darkColors : lightColors;\n      particlesRef.current.forEach(particle => {\n        particle.color = colors[particle.type] || colors.default;\n        console.log(`Updated ${particle.type} particle color to:`, particle.color);\n      });\n    }\n  }, [isDark]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n\n    // Create different types of particles\n    const createParticle = (type = \"default\") => {\n      const baseParticle = {\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        vx: (Math.random() - 0.5) * 0.8,\n        vy: (Math.random() - 0.5) * 0.8,\n        size: Math.random() * 4 + 1,\n        opacity: Math.random() * 0.6 + 0.2,\n        originalSize: Math.random() * 4 + 1,\n        type: type,\n        rotation: 0,\n        rotationSpeed: (Math.random() - 0.5) * 0.02,\n        pulsePhase: Math.random() * Math.PI * 2,\n        pulseSpeed: Math.random() * 0.02 + 0.01,\n        color: \"#60a5fa\" // Default color, will be updated by theme effect\n      };\n\n      // Add type-specific properties\n      switch (type) {\n        case \"star\":\n          return {\n            ...baseParticle,\n            points: 5,\n            innerRadius: baseParticle.size * 0.4,\n            outerRadius: baseParticle.size\n          };\n        case \"hexagon\":\n          return {\n            ...baseParticle,\n            sides: 6\n          };\n        case \"diamond\":\n          return {\n            ...baseParticle\n          };\n        default:\n          return baseParticle;\n      }\n    };\n    const initParticles = () => {\n      particlesRef.current = [];\n      const particleTypes = [\"star\", \"hexagon\", \"circle\", \"diamond\", \"default\"];\n      for (let i = 0; i < 80; i++) {\n        const type = particleTypes[Math.floor(Math.random() * particleTypes.length)];\n        particlesRef.current.push(createParticle(type));\n      }\n      console.log(\"Particles initialized, isDark:\", isDark);\n    };\n    const updateParticles = () => {\n      particlesRef.current.forEach(particle => {\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n        particle.rotation += particle.rotationSpeed;\n        particle.pulsePhase += particle.pulseSpeed;\n\n        // Mouse interaction with different effects for different types\n        const dx = mouseRef.current.x - particle.x;\n        const dy = mouseRef.current.y - particle.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < 120) {\n          const force = (120 - distance) / 120;\n          particle.vx += dx / distance * force * 0.02;\n          particle.vy += dy / distance * force * 0.02;\n          particle.size = particle.originalSize + force * 3;\n          particle.opacity = Math.min(0.9, particle.opacity + force * 0.4);\n        } else {\n          particle.size = Math.max(particle.originalSize, particle.size - 0.05);\n          particle.opacity = Math.max(0.2, particle.opacity - 0.01);\n        }\n\n        // Boundary check with bounce\n        if (particle.x < 0 || particle.x > canvas.width) {\n          particle.vx *= -0.8;\n          particle.x = Math.max(0, Math.min(canvas.width, particle.x));\n        }\n        if (particle.y < 0 || particle.y > canvas.height) {\n          particle.vy *= -0.8;\n          particle.y = Math.max(0, Math.min(canvas.height, particle.y));\n        }\n      });\n    };\n    const drawParticle = particle => {\n      ctx.save();\n      ctx.translate(particle.x, particle.y);\n      ctx.rotate(particle.rotation);\n      const pulse = Math.sin(particle.pulsePhase) * 0.3 + 1;\n      const currentSize = particle.size * pulse;\n      ctx.globalAlpha = particle.opacity;\n\n      // Use the particle's current color directly\n      ctx.fillStyle = particle.color;\n      switch (particle.type) {\n        case \"star\":\n          drawStar(ctx, 0, 0, particle.points, currentSize, particle.innerRadius);\n          break;\n        case \"hexagon\":\n          drawHexagon(ctx, 0, 0, currentSize);\n          break;\n        case \"diamond\":\n          drawDiamond(ctx, 0, 0, currentSize);\n          break;\n        default:\n          ctx.beginPath();\n          ctx.arc(0, 0, currentSize, 0, Math.PI * 2);\n          ctx.fill();\n      }\n      ctx.restore();\n    };\n    const drawStar = (ctx, x, y, points, outerRadius, innerRadius) => {\n      ctx.beginPath();\n      for (let i = 0; i < points * 2; i++) {\n        const radius = i % 2 === 0 ? outerRadius : innerRadius;\n        const angle = i * Math.PI / points;\n        const px = x + Math.cos(angle) * radius;\n        const py = y + Math.sin(angle) * radius;\n        if (i === 0) ctx.moveTo(px, py);else ctx.lineTo(px, py);\n      }\n      ctx.closePath();\n      ctx.fill();\n    };\n    const drawHexagon = (ctx, x, y, radius) => {\n      ctx.beginPath();\n      for (let i = 0; i < 6; i++) {\n        const angle = i * Math.PI / 3;\n        const px = x + Math.cos(angle) * radius;\n        const py = y + Math.sin(angle) * radius;\n        if (i === 0) ctx.moveTo(px, py);else ctx.lineTo(px, py);\n      }\n      ctx.closePath();\n      ctx.fill();\n    };\n    const drawDiamond = (ctx, x, y, size) => {\n      ctx.beginPath();\n      ctx.moveTo(x, y - size);\n      ctx.lineTo(x + size, y);\n      ctx.lineTo(x, y + size);\n      ctx.lineTo(x - size, y);\n      ctx.closePath();\n      ctx.fill();\n    };\n    const drawParticles = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw particles\n      particlesRef.current.forEach(particle => {\n        drawParticle(particle);\n      });\n\n      // Draw connections between nearby particles\n      particlesRef.current.forEach((particle, i) => {\n        particlesRef.current.slice(i + 1).forEach(otherParticle => {\n          const dx = particle.x - otherParticle.x;\n          const dy = particle.y - otherParticle.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance < 150) {\n            ctx.beginPath();\n            ctx.moveTo(particle.x, particle.y);\n            ctx.lineTo(otherParticle.x, otherParticle.y);\n            const opacity = Math.max(0, 0.3 - distance / 500);\n            ctx.strokeStyle = isDark ? `rgba(99, 102, 241, ${opacity})` : `rgba(59, 130, 246, ${opacity})`;\n            ctx.lineWidth = 0.5;\n            ctx.stroke();\n          }\n        });\n      });\n    };\n    const animate = () => {\n      updateParticles();\n      drawParticles();\n      animationRef.current = requestAnimationFrame(animate);\n    };\n    const handleMouseMove = e => {\n      mouseRef.current.x = e.clientX;\n      mouseRef.current.y = e.clientY;\n    };\n    resizeCanvas();\n    initParticles();\n    animate();\n    window.addEventListener(\"resize\", resizeCanvas);\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    return () => {\n      window.removeEventListener(\"resize\", resizeCanvas);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []); // Empty dependency array - only run once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 pointer-events-none z-0\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"w-full h-full\",\n      style: {\n        background: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 5\n  }, this);\n};\n_s(AdvancedParticleBackground, \"+1ja0YLGj9L0yXVnCiWja9govBA=\");\n_c = AdvancedParticleBackground;\nexport default AdvancedParticleBackground;\nvar _c;\n$RefreshReg$(_c, \"AdvancedParticleBackground\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","AdvancedParticleBackground","theme","_s","canvasRef","animationRef","particlesRef","mouseRef","x","y","isDark","setIsDark","console","log","current","length","darkColors","star","hexagon","circle","diamond","default","lightColors","colors","forEach","particle","color","type","canvas","ctx","getContext","resizeCanvas","width","window","innerWidth","height","innerHeight","createParticle","baseParticle","Math","random","vx","vy","size","opacity","originalSize","rotation","rotationSpeed","pulsePhase","PI","pulseSpeed","points","innerRadius","outerRadius","sides","initParticles","particleTypes","i","floor","push","updateParticles","dx","dy","distance","sqrt","force","min","max","drawParticle","save","translate","rotate","pulse","sin","currentSize","globalAlpha","fillStyle","drawStar","drawHexagon","drawDiamond","beginPath","arc","fill","restore","radius","angle","px","cos","py","moveTo","lineTo","closePath","drawParticles","clearRect","slice","otherParticle","strokeStyle","lineWidth","stroke","animate","requestAnimationFrame","handleMouseMove","e","clientX","clientY","addEventListener","removeEventListener","cancelAnimationFrame","className","children","ref","style","background","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/important/cursor/netrik website/Netrik-techworks-website/frontend/src/components/AdvancedParticleBackground.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst AdvancedParticleBackground = ({ theme = \"dark\" }) => {\r\n  const canvasRef = useRef(null);\r\n  const animationRef = useRef(null);\r\n  const particlesRef = useRef([]);\r\n  const mouseRef = useRef({ x: 0, y: 0 });\r\n  const [isDark, setIsDark] = useState(theme === \"dark\");\r\n\r\n  // Update isDark when theme prop changes\r\n  useEffect(() => {\r\n    console.log(\"Theme changed to:\", theme);\r\n    setIsDark(theme === \"dark\");\r\n  }, [theme]);\r\n\r\n  // Update particle colors when isDark changes\r\n  useEffect(() => {\r\n    if (particlesRef.current.length > 0) {\r\n      console.log(\"Updating particle colors, isDark:\", isDark);\r\n      \r\n      // Define color schemes\r\n      const darkColors = {\r\n        star: \"#60a5fa\",\r\n        hexagon: \"#a78bfa\", \r\n        circle: \"#34d399\",\r\n        diamond: \"#fbbf24\",\r\n        default: \"#f472b6\"\r\n      };\r\n      \r\n      const lightColors = {\r\n        star: \"#3b82f6\",\r\n        hexagon: \"#8b5cf6\",\r\n        circle: \"#10b981\", \r\n        diamond: \"#f59e0b\",\r\n        default: \"#ec4899\"\r\n      };\r\n      \r\n      const colors = isDark ? darkColors : lightColors;\r\n      \r\n      particlesRef.current.forEach(particle => {\r\n        particle.color = colors[particle.type] || colors.default;\r\n        console.log(`Updated ${particle.type} particle color to:`, particle.color);\r\n      });\r\n    }\r\n  }, [isDark]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    \r\n    const resizeCanvas = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n\r\n    // Create different types of particles\r\n    const createParticle = (type = \"default\") => {\r\n      const baseParticle = {\r\n        x: Math.random() * canvas.width,\r\n        y: Math.random() * canvas.height,\r\n        vx: (Math.random() - 0.5) * 0.8,\r\n        vy: (Math.random() - 0.5) * 0.8,\r\n        size: Math.random() * 4 + 1,\r\n        opacity: Math.random() * 0.6 + 0.2,\r\n        originalSize: Math.random() * 4 + 1,\r\n        type: type,\r\n        rotation: 0,\r\n        rotationSpeed: (Math.random() - 0.5) * 0.02,\r\n        pulsePhase: Math.random() * Math.PI * 2,\r\n        pulseSpeed: Math.random() * 0.02 + 0.01,\r\n        color: \"#60a5fa\" // Default color, will be updated by theme effect\r\n      };\r\n\r\n      // Add type-specific properties\r\n      switch (type) {\r\n        case \"star\":\r\n          return {\r\n            ...baseParticle,\r\n            points: 5,\r\n            innerRadius: baseParticle.size * 0.4,\r\n            outerRadius: baseParticle.size,\r\n          };\r\n        case \"hexagon\":\r\n          return {\r\n            ...baseParticle,\r\n            sides: 6,\r\n          };\r\n        case \"diamond\":\r\n          return {\r\n            ...baseParticle,\r\n          };\r\n        default:\r\n          return baseParticle;\r\n      }\r\n    };\r\n\r\n    const initParticles = () => {\r\n      particlesRef.current = [];\r\n      const particleTypes = [\"star\", \"hexagon\", \"circle\", \"diamond\", \"default\"];\r\n      \r\n      for (let i = 0; i < 80; i++) {\r\n        const type = particleTypes[Math.floor(Math.random() * particleTypes.length)];\r\n        particlesRef.current.push(createParticle(type));\r\n      }\r\n      console.log(\"Particles initialized, isDark:\", isDark);\r\n    };\r\n\r\n    const updateParticles = () => {\r\n      particlesRef.current.forEach((particle) => {\r\n        particle.x += particle.vx;\r\n        particle.y += particle.vy;\r\n        particle.rotation += particle.rotationSpeed;\r\n        particle.pulsePhase += particle.pulseSpeed;\r\n\r\n        // Mouse interaction with different effects for different types\r\n        const dx = mouseRef.current.x - particle.x;\r\n        const dy = mouseRef.current.y - particle.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        \r\n        if (distance < 120) {\r\n          const force = (120 - distance) / 120;\r\n          particle.vx += (dx / distance) * force * 0.02;\r\n          particle.vy += (dy / distance) * force * 0.02;\r\n          particle.size = particle.originalSize + force * 3;\r\n          particle.opacity = Math.min(0.9, particle.opacity + force * 0.4);\r\n        } else {\r\n          particle.size = Math.max(particle.originalSize, particle.size - 0.05);\r\n          particle.opacity = Math.max(0.2, particle.opacity - 0.01);\r\n        }\r\n\r\n        // Boundary check with bounce\r\n        if (particle.x < 0 || particle.x > canvas.width) {\r\n          particle.vx *= -0.8;\r\n          particle.x = Math.max(0, Math.min(canvas.width, particle.x));\r\n        }\r\n        if (particle.y < 0 || particle.y > canvas.height) {\r\n          particle.vy *= -0.8;\r\n          particle.y = Math.max(0, Math.min(canvas.height, particle.y));\r\n        }\r\n      });\r\n    };\r\n\r\n    const drawParticle = (particle) => {\r\n      ctx.save();\r\n      ctx.translate(particle.x, particle.y);\r\n      ctx.rotate(particle.rotation);\r\n      \r\n      const pulse = Math.sin(particle.pulsePhase) * 0.3 + 1;\r\n      const currentSize = particle.size * pulse;\r\n      \r\n      ctx.globalAlpha = particle.opacity;\r\n      \r\n      // Use the particle's current color directly\r\n      ctx.fillStyle = particle.color;\r\n      \r\n      switch (particle.type) {\r\n        case \"star\":\r\n          drawStar(ctx, 0, 0, particle.points, currentSize, particle.innerRadius);\r\n          break;\r\n        case \"hexagon\":\r\n          drawHexagon(ctx, 0, 0, currentSize);\r\n          break;\r\n        case \"diamond\":\r\n          drawDiamond(ctx, 0, 0, currentSize);\r\n          break;\r\n        default:\r\n          ctx.beginPath();\r\n          ctx.arc(0, 0, currentSize, 0, Math.PI * 2);\r\n          ctx.fill();\r\n      }\r\n      \r\n      ctx.restore();\r\n    };\r\n\r\n    const drawStar = (ctx, x, y, points, outerRadius, innerRadius) => {\r\n      ctx.beginPath();\r\n      for (let i = 0; i < points * 2; i++) {\r\n        const radius = i % 2 === 0 ? outerRadius : innerRadius;\r\n        const angle = (i * Math.PI) / points;\r\n        const px = x + Math.cos(angle) * radius;\r\n        const py = y + Math.sin(angle) * radius;\r\n        if (i === 0) ctx.moveTo(px, py);\r\n        else ctx.lineTo(px, py);\r\n      }\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    };\r\n\r\n    const drawHexagon = (ctx, x, y, radius) => {\r\n      ctx.beginPath();\r\n      for (let i = 0; i < 6; i++) {\r\n        const angle = (i * Math.PI) / 3;\r\n        const px = x + Math.cos(angle) * radius;\r\n        const py = y + Math.sin(angle) * radius;\r\n        if (i === 0) ctx.moveTo(px, py);\r\n        else ctx.lineTo(px, py);\r\n      }\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    };\r\n\r\n    const drawDiamond = (ctx, x, y, size) => {\r\n      ctx.beginPath();\r\n      ctx.moveTo(x, y - size);\r\n      ctx.lineTo(x + size, y);\r\n      ctx.lineTo(x, y + size);\r\n      ctx.lineTo(x - size, y);\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    };\r\n\r\n    const drawParticles = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Draw particles\r\n      particlesRef.current.forEach((particle) => {\r\n        drawParticle(particle);\r\n      });\r\n\r\n      // Draw connections between nearby particles\r\n      particlesRef.current.forEach((particle, i) => {\r\n        particlesRef.current.slice(i + 1).forEach((otherParticle) => {\r\n          const dx = particle.x - otherParticle.x;\r\n          const dy = particle.y - otherParticle.y;\r\n          const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n          if (distance < 150) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(particle.x, particle.y);\r\n            ctx.lineTo(otherParticle.x, otherParticle.y);\r\n            \r\n            const opacity = Math.max(0, 0.3 - distance / 500);\r\n            ctx.strokeStyle = isDark \r\n              ? `rgba(99, 102, 241, ${opacity})`\r\n              : `rgba(59, 130, 246, ${opacity})`;\r\n            ctx.lineWidth = 0.5;\r\n            ctx.stroke();\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    const animate = () => {\r\n      updateParticles();\r\n      drawParticles();\r\n      animationRef.current = requestAnimationFrame(animate);\r\n    };\r\n\r\n    const handleMouseMove = (e) => {\r\n      mouseRef.current.x = e.clientX;\r\n      mouseRef.current.y = e.clientY;\r\n    };\r\n\r\n    resizeCanvas();\r\n    initParticles();\r\n    animate();\r\n\r\n    window.addEventListener(\"resize\", resizeCanvas);\r\n    window.addEventListener(\"mousemove\", handleMouseMove);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeCanvas);\r\n      window.removeEventListener(\"mousemove\", handleMouseMove);\r\n      if (animationRef.current) {\r\n        cancelAnimationFrame(animationRef.current);\r\n      }\r\n    };\r\n  }, []); // Empty dependency array - only run once\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 pointer-events-none z-0\">\r\n      <canvas\r\n        ref={canvasRef}\r\n        className=\"w-full h-full\"\r\n        style={{ background: \"transparent\" }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdvancedParticleBackground;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}